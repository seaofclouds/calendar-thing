globalThis.process ??= {}; globalThis.process.env ??= {};
import { c as createComponent, a as createAstro, r as renderTemplate, b as renderHead, d as renderComponent, e as renderScript } from '../chunks/astro/server_BXn8oDq3.mjs';
import { a as requireReact, b as reactExports } from '../chunks/_@astro-renderers_O4SP2Us9.mjs';
export { r as renderers } from '../chunks/_@astro-renderers_O4SP2Us9.mjs';
/* empty css                                  */

var jsxRuntime = {exports: {}};

var reactJsxRuntime_production_min = {};

/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactJsxRuntime_production_min;

function requireReactJsxRuntime_production_min () {
	if (hasRequiredReactJsxRuntime_production_min) return reactJsxRuntime_production_min;
	hasRequiredReactJsxRuntime_production_min = 1;
var f=requireReact(),k=Symbol.for("react.element"),l=Symbol.for("react.fragment"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:true,ref:true,__self:true,__source:true};
	function q(c,a,g){var b,d={},e=null,h=null;undefined!==g&&(e=""+g);undefined!==a.key&&(e=""+a.key);undefined!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a) undefined===d[b]&&(d[b]=a[b]);return {$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}reactJsxRuntime_production_min.Fragment=l;reactJsxRuntime_production_min.jsx=q;reactJsxRuntime_production_min.jsxs=q;
	return reactJsxRuntime_production_min;
}

var hasRequiredJsxRuntime;

function requireJsxRuntime () {
	if (hasRequiredJsxRuntime) return jsxRuntime.exports;
	hasRequiredJsxRuntime = 1;
	{
	  jsxRuntime.exports = requireReactJsxRuntime_production_min();
	}
	return jsxRuntime.exports;
}

var jsxRuntimeExports = requireJsxRuntime();

/**
    @preserve

    Astronomy library for JavaScript (browser and Node.js).
    https://github.com/cosinekitty/astronomy

    MIT License

    Copyright (c) 2019-2023 Don Cross <cosinekitty@gmail.com>

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
*/
/**
 * @fileoverview Astronomy calculation library for browser scripting and Node.js.
 * @author Don Cross <cosinekitty@gmail.com>
 * @license MIT
 */
/**
 * @brief The speed of light in AU/day.
 */
const C_AUDAY = 173.1446326846693;
/**
 * @brief The number of kilometers per astronomical unit.
 */
const KM_PER_AU = 1.4959787069098932e+8;
/**
 * @brief The factor to convert degrees to radians = pi/180.
 */
const DEG2RAD = 0.017453292519943296;
/**
 * @brief The factor to convert radians to degrees = 180/pi.
 */
const RAD2DEG = 57.295779513082321;
const DAYS_PER_TROPICAL_YEAR = 365.24217;
const J2000 = new Date('2000-01-01T12:00:00Z');
const PI2 = 2 * Math.PI;
const ARC = 3600 * (180 / Math.PI); // arcseconds per radian
const ASEC2RAD = 4.848136811095359935899141e-6;
const ASEC180 = 180 * 60 * 60; // arcseconds per 180 degrees (or pi radians)
const ASEC360 = 2 * ASEC180; // arcseconds per 360 degrees (or 2*pi radians)
const MEAN_SYNODIC_MONTH = 29.530588; // average number of days for Moon to return to the same phase
const SECONDS_PER_DAY = 24 * 3600;
const MILLIS_PER_DAY = SECONDS_PER_DAY * 1000;
const EARTH_EQUATORIAL_RADIUS_KM = 6378.1366;
const EARTH_EQUATORIAL_RADIUS_AU = EARTH_EQUATORIAL_RADIUS_KM / KM_PER_AU;
const EARTH_MOON_MASS_RATIO = 81.30056;
/*
    Masses of the Sun and outer planets, used for:
    (1) Calculating the Solar System Barycenter
    (2) Integrating the movement of Pluto

    https://web.archive.org/web/20120220062549/http://iau-comm4.jpl.nasa.gov/de405iom/de405iom.pdf

    Page 10 in the above document describes the constants used in the DE405 ephemeris.
    The following are G*M values (gravity constant * mass) in [au^3 / day^2].
    This side-steps issues of not knowing the exact values of G and masses M[i];
    the products GM[i] are known extremely accurately.
*/
const SUN_GM = 0.2959122082855911e-03;
const JUPITER_GM = 0.2825345909524226e-06;
const SATURN_GM = 0.8459715185680659e-07;
const URANUS_GM = 0.1292024916781969e-07;
const NEPTUNE_GM = 0.1524358900784276e-07;
function VerifyNumber(x) {
    if (!Number.isFinite(x)) {
        console.trace();
        throw `Value is not a finite number: ${x}`;
    }
    return x;
}
function Frac(x) {
    return x - Math.floor(x);
}
/**
 * @brief String constants that represent the solar system bodies supported by Astronomy Engine.
 *
 * The following strings represent solar system bodies supported by various Astronomy Engine functions.
 * Not every body is supported by every function; consult the documentation for each function
 * to find which bodies it supports.
 *
 * "Sun", "Moon", "Mercury", "Venus", "Earth", "Mars", "Jupiter",
 * "Saturn", "Uranus", "Neptune", "Pluto",
 * "SSB" (Solar System Barycenter),
 * "EMB" (Earth/Moon Barycenter)
 *
 * You can also use enumeration syntax for the bodies, like
 * `Astronomy.Body.Moon`, `Astronomy.Body.Jupiter`, etc.
 *
 * @enum {string}
 */
var Body;
(function (Body) {
    Body["Sun"] = "Sun";
    Body["Moon"] = "Moon";
    Body["Mercury"] = "Mercury";
    Body["Venus"] = "Venus";
    Body["Earth"] = "Earth";
    Body["Mars"] = "Mars";
    Body["Jupiter"] = "Jupiter";
    Body["Saturn"] = "Saturn";
    Body["Uranus"] = "Uranus";
    Body["Neptune"] = "Neptune";
    Body["Pluto"] = "Pluto";
    Body["SSB"] = "SSB";
    Body["EMB"] = "EMB";
    // User-defined fixed locations in the sky...
    Body["Star1"] = "Star1";
    Body["Star2"] = "Star2";
    Body["Star3"] = "Star3";
    Body["Star4"] = "Star4";
    Body["Star5"] = "Star5";
    Body["Star6"] = "Star6";
    Body["Star7"] = "Star7";
    Body["Star8"] = "Star8";
})(Body || (Body = {}));
const StarList = [
    Body.Star1, Body.Star2, Body.Star3, Body.Star4,
    Body.Star5, Body.Star6, Body.Star7, Body.Star8
];
const StarTable = [
    { ra: 0, dec: 0, dist: 0 },
    { ra: 0, dec: 0, dist: 0 },
    { ra: 0, dec: 0, dist: 0 },
    { ra: 0, dec: 0, dist: 0 },
    { ra: 0, dec: 0, dist: 0 },
    { ra: 0, dec: 0, dist: 0 },
    { ra: 0, dec: 0, dist: 0 },
    { ra: 0, dec: 0, dist: 0 },
];
function GetStar(body) {
    const index = StarList.indexOf(body);
    return (index >= 0) ? StarTable[index] : null;
}
function UserDefinedStar(body) {
    const star = GetStar(body);
    return (star && star.dist > 0) ? star : null;
}
var PrecessDirection;
(function (PrecessDirection) {
    PrecessDirection[PrecessDirection["From2000"] = 0] = "From2000";
    PrecessDirection[PrecessDirection["Into2000"] = 1] = "Into2000";
})(PrecessDirection || (PrecessDirection = {}));
const vsop = {
    Mercury: [
        [
            [
                [4.40250710144, 0.00000000000, 0.00000000000],
                [0.40989414977, 1.48302034195, 26087.90314157420],
                [0.05046294200, 4.47785489551, 52175.80628314840],
                [0.00855346844, 1.16520322459, 78263.70942472259],
                [0.00165590362, 4.11969163423, 104351.61256629678],
                [0.00034561897, 0.77930768443, 130439.51570787099],
                [0.00007583476, 3.71348404924, 156527.41884944518]
            ],
            [
                [26087.90313685529, 0.00000000000, 0.00000000000],
                [0.01131199811, 6.21874197797, 26087.90314157420],
                [0.00292242298, 3.04449355541, 52175.80628314840],
                [0.00075775081, 6.08568821653, 78263.70942472259],
                [0.00019676525, 2.80965111777, 104351.61256629678]
            ]
        ],
        [
            [
                [0.11737528961, 1.98357498767, 26087.90314157420],
                [0.02388076996, 5.03738959686, 52175.80628314840],
                [0.01222839532, 3.14159265359, 0.00000000000],
                [0.00543251810, 1.79644363964, 78263.70942472259],
                [0.00129778770, 4.83232503958, 104351.61256629678],
                [0.00031866927, 1.58088495658, 130439.51570787099],
                [0.00007963301, 4.60972126127, 156527.41884944518]
            ],
            [
                [0.00274646065, 3.95008450011, 26087.90314157420],
                [0.00099737713, 3.14159265359, 0.00000000000]
            ]
        ],
        [
            [
                [0.39528271651, 0.00000000000, 0.00000000000],
                [0.07834131818, 6.19233722598, 26087.90314157420],
                [0.00795525558, 2.95989690104, 52175.80628314840],
                [0.00121281764, 6.01064153797, 78263.70942472259],
                [0.00021921969, 2.77820093972, 104351.61256629678],
                [0.00004354065, 5.82894543774, 130439.51570787099]
            ],
            [
                [0.00217347740, 4.65617158665, 26087.90314157420],
                [0.00044141826, 1.42385544001, 52175.80628314840]
            ]
        ]
    ],
    Venus: [
        [
            [
                [3.17614666774, 0.00000000000, 0.00000000000],
                [0.01353968419, 5.59313319619, 10213.28554621100],
                [0.00089891645, 5.30650047764, 20426.57109242200],
                [0.00005477194, 4.41630661466, 7860.41939243920],
                [0.00003455741, 2.69964447820, 11790.62908865880],
                [0.00002372061, 2.99377542079, 3930.20969621960],
                [0.00001317168, 5.18668228402, 26.29831979980],
                [0.00001664146, 4.25018630147, 1577.34354244780],
                [0.00001438387, 4.15745084182, 9683.59458111640],
                [0.00001200521, 6.15357116043, 30639.85663863300]
            ],
            [
                [10213.28554621638, 0.00000000000, 0.00000000000],
                [0.00095617813, 2.46406511110, 10213.28554621100],
                [0.00007787201, 0.62478482220, 20426.57109242200]
            ]
        ],
        [
            [
                [0.05923638472, 0.26702775812, 10213.28554621100],
                [0.00040107978, 1.14737178112, 20426.57109242200],
                [0.00032814918, 3.14159265359, 0.00000000000]
            ],
            [
                [0.00287821243, 1.88964962838, 10213.28554621100]
            ]
        ],
        [
            [
                [0.72334820891, 0.00000000000, 0.00000000000],
                [0.00489824182, 4.02151831717, 10213.28554621100],
                [0.00001658058, 4.90206728031, 20426.57109242200],
                [0.00001378043, 1.12846591367, 11790.62908865880],
                [0.00001632096, 2.84548795207, 7860.41939243920],
                [0.00000498395, 2.58682193892, 9683.59458111640],
                [0.00000221985, 2.01346696541, 19367.18916223280],
                [0.00000237454, 2.55136053886, 15720.83878487840]
            ],
            [
                [0.00034551041, 0.89198706276, 10213.28554621100]
            ]
        ]
    ],
    Earth: [
        [
            [
                [1.75347045673, 0.00000000000, 0.00000000000],
                [0.03341656453, 4.66925680415, 6283.07584999140],
                [0.00034894275, 4.62610242189, 12566.15169998280],
                [0.00003417572, 2.82886579754, 3.52311834900],
                [0.00003497056, 2.74411783405, 5753.38488489680],
                [0.00003135899, 3.62767041756, 77713.77146812050],
                [0.00002676218, 4.41808345438, 7860.41939243920],
                [0.00002342691, 6.13516214446, 3930.20969621960],
                [0.00001273165, 2.03709657878, 529.69096509460],
                [0.00001324294, 0.74246341673, 11506.76976979360],
                [0.00000901854, 2.04505446477, 26.29831979980],
                [0.00001199167, 1.10962946234, 1577.34354244780],
                [0.00000857223, 3.50849152283, 398.14900340820],
                [0.00000779786, 1.17882681962, 5223.69391980220],
                [0.00000990250, 5.23268072088, 5884.92684658320],
                [0.00000753141, 2.53339052847, 5507.55323866740],
                [0.00000505267, 4.58292599973, 18849.22754997420],
                [0.00000492392, 4.20505711826, 775.52261132400],
                [0.00000356672, 2.91954114478, 0.06731030280],
                [0.00000284125, 1.89869240932, 796.29800681640],
                [0.00000242879, 0.34481445893, 5486.77784317500],
                [0.00000317087, 5.84901948512, 11790.62908865880],
                [0.00000271112, 0.31486255375, 10977.07880469900],
                [0.00000206217, 4.80646631478, 2544.31441988340],
                [0.00000205478, 1.86953770281, 5573.14280143310],
                [0.00000202318, 2.45767790232, 6069.77675455340],
                [0.00000126225, 1.08295459501, 20.77539549240],
                [0.00000155516, 0.83306084617, 213.29909543800]
            ],
            [
                [6283.07584999140, 0.00000000000, 0.00000000000],
                [0.00206058863, 2.67823455808, 6283.07584999140],
                [0.00004303419, 2.63512233481, 12566.15169998280]
            ],
            [
                [0.00008721859, 1.07253635559, 6283.07584999140]
            ]
        ],
        [
            [],
            [
                [0.00227777722, 3.41376620530, 6283.07584999140],
                [0.00003805678, 3.37063423795, 12566.15169998280]
            ]
        ],
        [
            [
                [1.00013988784, 0.00000000000, 0.00000000000],
                [0.01670699632, 3.09846350258, 6283.07584999140],
                [0.00013956024, 3.05524609456, 12566.15169998280],
                [0.00003083720, 5.19846674381, 77713.77146812050],
                [0.00001628463, 1.17387558054, 5753.38488489680],
                [0.00001575572, 2.84685214877, 7860.41939243920],
                [0.00000924799, 5.45292236722, 11506.76976979360],
                [0.00000542439, 4.56409151453, 3930.20969621960],
                [0.00000472110, 3.66100022149, 5884.92684658320],
                [0.00000085831, 1.27079125277, 161000.68573767410],
                [0.00000057056, 2.01374292245, 83996.84731811189],
                [0.00000055736, 5.24159799170, 71430.69561812909],
                [0.00000174844, 3.01193636733, 18849.22754997420],
                [0.00000243181, 4.27349530790, 11790.62908865880]
            ],
            [
                [0.00103018607, 1.10748968172, 6283.07584999140],
                [0.00001721238, 1.06442300386, 12566.15169998280]
            ],
            [
                [0.00004359385, 5.78455133808, 6283.07584999140]
            ]
        ]
    ],
    Mars: [
        [
            [
                [6.20347711581, 0.00000000000, 0.00000000000],
                [0.18656368093, 5.05037100270, 3340.61242669980],
                [0.01108216816, 5.40099836344, 6681.22485339960],
                [0.00091798406, 5.75478744667, 10021.83728009940],
                [0.00027744987, 5.97049513147, 3.52311834900],
                [0.00010610235, 2.93958560338, 2281.23049651060],
                [0.00012315897, 0.84956094002, 2810.92146160520],
                [0.00008926784, 4.15697846427, 0.01725365220],
                [0.00008715691, 6.11005153139, 13362.44970679920],
                [0.00006797556, 0.36462229657, 398.14900340820],
                [0.00007774872, 3.33968761376, 5621.84292321040],
                [0.00003575078, 1.66186505710, 2544.31441988340],
                [0.00004161108, 0.22814971327, 2942.46342329160],
                [0.00003075252, 0.85696614132, 191.44826611160],
                [0.00002628117, 0.64806124465, 3337.08930835080],
                [0.00002937546, 6.07893711402, 0.06731030280],
                [0.00002389414, 5.03896442664, 796.29800681640],
                [0.00002579844, 0.02996736156, 3344.13554504880],
                [0.00001528141, 1.14979301996, 6151.53388830500],
                [0.00001798806, 0.65634057445, 529.69096509460],
                [0.00001264357, 3.62275122593, 5092.15195811580],
                [0.00001286228, 3.06796065034, 2146.16541647520],
                [0.00001546404, 2.91579701718, 1751.53953141600],
                [0.00001024902, 3.69334099279, 8962.45534991020],
                [0.00000891566, 0.18293837498, 16703.06213349900],
                [0.00000858759, 2.40093811940, 2914.01423582380],
                [0.00000832715, 2.46418619474, 3340.59517304760],
                [0.00000832720, 4.49495782139, 3340.62968035200],
                [0.00000712902, 3.66335473479, 1059.38193018920],
                [0.00000748723, 3.82248614017, 155.42039943420],
                [0.00000723861, 0.67497311481, 3738.76143010800],
                [0.00000635548, 2.92182225127, 8432.76438481560],
                [0.00000655162, 0.48864064125, 3127.31333126180],
                [0.00000550474, 3.81001042328, 0.98032106820],
                [0.00000552750, 4.47479317037, 1748.01641306700],
                [0.00000425966, 0.55364317304, 6283.07584999140],
                [0.00000415131, 0.49662285038, 213.29909543800],
                [0.00000472167, 3.62547124025, 1194.44701022460],
                [0.00000306551, 0.38052848348, 6684.74797174860],
                [0.00000312141, 0.99853944405, 6677.70173505060],
                [0.00000293198, 4.22131299634, 20.77539549240],
                [0.00000302375, 4.48618007156, 3532.06069281140],
                [0.00000274027, 0.54222167059, 3340.54511639700],
                [0.00000281079, 5.88163521788, 1349.86740965880],
                [0.00000231183, 1.28242156993, 3870.30339179440],
                [0.00000283602, 5.76885434940, 3149.16416058820],
                [0.00000236117, 5.75503217933, 3333.49887969900],
                [0.00000274033, 0.13372524985, 3340.67973700260],
                [0.00000299395, 2.78323740866, 6254.62666252360]
            ],
            [
                [3340.61242700512, 0.00000000000, 0.00000000000],
                [0.01457554523, 3.60433733236, 3340.61242669980],
                [0.00168414711, 3.92318567804, 6681.22485339960],
                [0.00020622975, 4.26108844583, 10021.83728009940],
                [0.00003452392, 4.73210393190, 3.52311834900],
                [0.00002586332, 4.60670058555, 13362.44970679920],
                [0.00000841535, 4.45864030426, 2281.23049651060]
            ],
            [
                [0.00058152577, 2.04961712429, 3340.61242669980],
                [0.00013459579, 2.45738706163, 6681.22485339960]
            ]
        ],
        [
            [
                [0.03197134986, 3.76832042431, 3340.61242669980],
                [0.00298033234, 4.10616996305, 6681.22485339960],
                [0.00289104742, 0.00000000000, 0.00000000000],
                [0.00031365539, 4.44651053090, 10021.83728009940],
                [0.00003484100, 4.78812549260, 13362.44970679920]
            ],
            [
                [0.00217310991, 6.04472194776, 3340.61242669980],
                [0.00020976948, 3.14159265359, 0.00000000000],
                [0.00012834709, 1.60810667915, 6681.22485339960]
            ]
        ],
        [
            [
                [1.53033488271, 0.00000000000, 0.00000000000],
                [0.14184953160, 3.47971283528, 3340.61242669980],
                [0.00660776362, 3.81783443019, 6681.22485339960],
                [0.00046179117, 4.15595316782, 10021.83728009940],
                [0.00008109733, 5.55958416318, 2810.92146160520],
                [0.00007485318, 1.77239078402, 5621.84292321040],
                [0.00005523191, 1.36436303770, 2281.23049651060],
                [0.00003825160, 4.49407183687, 13362.44970679920],
                [0.00002306537, 0.09081579001, 2544.31441988340],
                [0.00001999396, 5.36059617709, 3337.08930835080],
                [0.00002484394, 4.92545639920, 2942.46342329160],
                [0.00001960195, 4.74249437639, 3344.13554504880],
                [0.00001167119, 2.11260868341, 5092.15195811580],
                [0.00001102816, 5.00908403998, 398.14900340820],
                [0.00000899066, 4.40791133207, 529.69096509460],
                [0.00000992252, 5.83861961952, 6151.53388830500],
                [0.00000807354, 2.10217065501, 1059.38193018920],
                [0.00000797915, 3.44839203899, 796.29800681640],
                [0.00000740975, 1.49906336885, 2146.16541647520]
            ],
            [
                [0.01107433345, 2.03250524857, 3340.61242669980],
                [0.00103175887, 2.37071847807, 6681.22485339960],
                [0.00012877200, 0.00000000000, 0.00000000000],
                [0.00010815880, 2.70888095665, 10021.83728009940]
            ],
            [
                [0.00044242249, 0.47930604954, 3340.61242669980],
                [0.00008138042, 0.86998389204, 6681.22485339960]
            ]
        ]
    ],
    Jupiter: [
        [
            [
                [0.59954691494, 0.00000000000, 0.00000000000],
                [0.09695898719, 5.06191793158, 529.69096509460],
                [0.00573610142, 1.44406205629, 7.11354700080],
                [0.00306389205, 5.41734730184, 1059.38193018920],
                [0.00097178296, 4.14264726552, 632.78373931320],
                [0.00072903078, 3.64042916389, 522.57741809380],
                [0.00064263975, 3.41145165351, 103.09277421860],
                [0.00039806064, 2.29376740788, 419.48464387520],
                [0.00038857767, 1.27231755835, 316.39186965660],
                [0.00027964629, 1.78454591820, 536.80451209540],
                [0.00013589730, 5.77481040790, 1589.07289528380],
                [0.00008246349, 3.58227925840, 206.18554843720],
                [0.00008768704, 3.63000308199, 949.17560896980],
                [0.00007368042, 5.08101194270, 735.87651353180],
                [0.00006263150, 0.02497628807, 213.29909543800],
                [0.00006114062, 4.51319998626, 1162.47470440780],
                [0.00004905396, 1.32084470588, 110.20632121940],
                [0.00005305285, 1.30671216791, 14.22709400160],
                [0.00005305441, 4.18625634012, 1052.26838318840],
                [0.00004647248, 4.69958103684, 3.93215326310],
                [0.00003045023, 4.31676431084, 426.59819087600],
                [0.00002609999, 1.56667394063, 846.08283475120],
                [0.00002028191, 1.06376530715, 3.18139373770],
                [0.00001764763, 2.14148655117, 1066.49547719000],
                [0.00001722972, 3.88036268267, 1265.56747862640],
                [0.00001920945, 0.97168196472, 639.89728631400],
                [0.00001633223, 3.58201833555, 515.46387109300],
                [0.00001431999, 4.29685556046, 625.67019231240],
                [0.00000973272, 4.09764549134, 95.97922721780]
            ],
            [
                [529.69096508814, 0.00000000000, 0.00000000000],
                [0.00489503243, 4.22082939470, 529.69096509460],
                [0.00228917222, 6.02646855621, 7.11354700080],
                [0.00030099479, 4.54540782858, 1059.38193018920],
                [0.00020720920, 5.45943156902, 522.57741809380],
                [0.00012103653, 0.16994816098, 536.80451209540],
                [0.00006067987, 4.42422292017, 103.09277421860],
                [0.00005433968, 3.98480737746, 419.48464387520],
                [0.00004237744, 5.89008707199, 14.22709400160]
            ],
            [
                [0.00047233601, 4.32148536482, 7.11354700080],
                [0.00030649436, 2.92977788700, 529.69096509460],
                [0.00014837605, 3.14159265359, 0.00000000000]
            ]
        ],
        [
            [
                [0.02268615702, 3.55852606721, 529.69096509460],
                [0.00109971634, 3.90809347197, 1059.38193018920],
                [0.00110090358, 0.00000000000, 0.00000000000],
                [0.00008101428, 3.60509572885, 522.57741809380],
                [0.00006043996, 4.25883108339, 1589.07289528380],
                [0.00006437782, 0.30627119215, 536.80451209540]
            ],
            [
                [0.00078203446, 1.52377859742, 529.69096509460]
            ]
        ],
        [
            [
                [5.20887429326, 0.00000000000, 0.00000000000],
                [0.25209327119, 3.49108639871, 529.69096509460],
                [0.00610599976, 3.84115365948, 1059.38193018920],
                [0.00282029458, 2.57419881293, 632.78373931320],
                [0.00187647346, 2.07590383214, 522.57741809380],
                [0.00086792905, 0.71001145545, 419.48464387520],
                [0.00072062974, 0.21465724607, 536.80451209540],
                [0.00065517248, 5.97995884790, 316.39186965660],
                [0.00029134542, 1.67759379655, 103.09277421860],
                [0.00030135335, 2.16132003734, 949.17560896980],
                [0.00023453271, 3.54023522184, 735.87651353180],
                [0.00022283743, 4.19362594399, 1589.07289528380],
                [0.00023947298, 0.27458037480, 7.11354700080],
                [0.00013032614, 2.96042965363, 1162.47470440780],
                [0.00009703360, 1.90669633585, 206.18554843720],
                [0.00012749023, 2.71550286592, 1052.26838318840],
                [0.00007057931, 2.18184839926, 1265.56747862640],
                [0.00006137703, 6.26418240033, 846.08283475120],
                [0.00002616976, 2.00994012876, 1581.95934828300]
            ],
            [
                [0.01271801520, 2.64937512894, 529.69096509460],
                [0.00061661816, 3.00076460387, 1059.38193018920],
                [0.00053443713, 3.89717383175, 522.57741809380],
                [0.00031185171, 4.88276958012, 536.80451209540],
                [0.00041390269, 0.00000000000, 0.00000000000]
            ]
        ]
    ],
    Saturn: [
        [
            [
                [0.87401354025, 0.00000000000, 0.00000000000],
                [0.11107659762, 3.96205090159, 213.29909543800],
                [0.01414150957, 4.58581516874, 7.11354700080],
                [0.00398379389, 0.52112032699, 206.18554843720],
                [0.00350769243, 3.30329907896, 426.59819087600],
                [0.00206816305, 0.24658372002, 103.09277421860],
                [0.00079271300, 3.84007056878, 220.41264243880],
                [0.00023990355, 4.66976924553, 110.20632121940],
                [0.00016573588, 0.43719228296, 419.48464387520],
                [0.00014906995, 5.76903183869, 316.39186965660],
                [0.00015820290, 0.93809155235, 632.78373931320],
                [0.00014609559, 1.56518472000, 3.93215326310],
                [0.00013160301, 4.44891291899, 14.22709400160],
                [0.00015053543, 2.71669915667, 639.89728631400],
                [0.00013005299, 5.98119023644, 11.04570026390],
                [0.00010725067, 3.12939523827, 202.25339517410],
                [0.00005863206, 0.23656938524, 529.69096509460],
                [0.00005227757, 4.20783365759, 3.18139373770],
                [0.00006126317, 1.76328667907, 277.03499374140],
                [0.00005019687, 3.17787728405, 433.71173787680],
                [0.00004592550, 0.61977744975, 199.07200143640],
                [0.00004005867, 2.24479718502, 63.73589830340],
                [0.00002953796, 0.98280366998, 95.97922721780],
                [0.00003873670, 3.22283226966, 138.51749687070],
                [0.00002461186, 2.03163875071, 735.87651353180],
                [0.00003269484, 0.77492638211, 949.17560896980],
                [0.00001758145, 3.26580109940, 522.57741809380],
                [0.00001640172, 5.50504453050, 846.08283475120],
                [0.00001391327, 4.02333150505, 323.50541665740],
                [0.00001580648, 4.37265307169, 309.27832265580],
                [0.00001123498, 2.83726798446, 415.55249061210],
                [0.00001017275, 3.71700135395, 227.52618943960],
                [0.00000848642, 3.19150170830, 209.36694217490]
            ],
            [
                [213.29909521690, 0.00000000000, 0.00000000000],
                [0.01297370862, 1.82834923978, 213.29909543800],
                [0.00564345393, 2.88499717272, 7.11354700080],
                [0.00093734369, 1.06311793502, 426.59819087600],
                [0.00107674962, 2.27769131009, 206.18554843720],
                [0.00040244455, 2.04108104671, 220.41264243880],
                [0.00019941774, 1.27954390470, 103.09277421860],
                [0.00010511678, 2.74880342130, 14.22709400160],
                [0.00006416106, 0.38238295041, 639.89728631400],
                [0.00004848994, 2.43037610229, 419.48464387520],
                [0.00004056892, 2.92133209468, 110.20632121940],
                [0.00003768635, 3.64965330780, 3.93215326310]
            ],
            [
                [0.00116441330, 1.17988132879, 7.11354700080],
                [0.00091841837, 0.07325195840, 213.29909543800],
                [0.00036661728, 0.00000000000, 0.00000000000],
                [0.00015274496, 4.06493179167, 206.18554843720]
            ]
        ],
        [
            [
                [0.04330678039, 3.60284428399, 213.29909543800],
                [0.00240348302, 2.85238489373, 426.59819087600],
                [0.00084745939, 0.00000000000, 0.00000000000],
                [0.00030863357, 3.48441504555, 220.41264243880],
                [0.00034116062, 0.57297307557, 206.18554843720],
                [0.00014734070, 2.11846596715, 639.89728631400],
                [0.00009916667, 5.79003188904, 419.48464387520],
                [0.00006993564, 4.73604689720, 7.11354700080],
                [0.00004807588, 5.43305312061, 316.39186965660]
            ],
            [
                [0.00198927992, 4.93901017903, 213.29909543800],
                [0.00036947916, 3.14159265359, 0.00000000000],
                [0.00017966989, 0.51979431110, 426.59819087600]
            ]
        ],
        [
            [
                [9.55758135486, 0.00000000000, 0.00000000000],
                [0.52921382865, 2.39226219573, 213.29909543800],
                [0.01873679867, 5.23549604660, 206.18554843720],
                [0.01464663929, 1.64763042902, 426.59819087600],
                [0.00821891141, 5.93520042303, 316.39186965660],
                [0.00547506923, 5.01532618980, 103.09277421860],
                [0.00371684650, 2.27114821115, 220.41264243880],
                [0.00361778765, 3.13904301847, 7.11354700080],
                [0.00140617506, 5.70406606781, 632.78373931320],
                [0.00108974848, 3.29313390175, 110.20632121940],
                [0.00069006962, 5.94099540992, 419.48464387520],
                [0.00061053367, 0.94037691801, 639.89728631400],
                [0.00048913294, 1.55733638681, 202.25339517410],
                [0.00034143772, 0.19519102597, 277.03499374140],
                [0.00032401773, 5.47084567016, 949.17560896980],
                [0.00020936596, 0.46349251129, 735.87651353180],
                [0.00009796004, 5.20477537945, 1265.56747862640],
                [0.00011993338, 5.98050967385, 846.08283475120],
                [0.00020839300, 1.52102476129, 433.71173787680],
                [0.00015298404, 3.05943814940, 529.69096509460],
                [0.00006465823, 0.17732249942, 1052.26838318840],
                [0.00011380257, 1.73105427040, 522.57741809380],
                [0.00003419618, 4.94550542171, 1581.95934828300]
            ],
            [
                [0.06182981340, 0.25843511480, 213.29909543800],
                [0.00506577242, 0.71114625261, 206.18554843720],
                [0.00341394029, 5.79635741658, 426.59819087600],
                [0.00188491195, 0.47215589652, 220.41264243880],
                [0.00186261486, 3.14159265359, 0.00000000000],
                [0.00143891146, 1.40744822888, 7.11354700080]
            ],
            [
                [0.00436902572, 4.78671677509, 213.29909543800]
            ]
        ]
    ],
    Uranus: [
        [
            [
                [5.48129294297, 0.00000000000, 0.00000000000],
                [0.09260408234, 0.89106421507, 74.78159856730],
                [0.01504247898, 3.62719260920, 1.48447270830],
                [0.00365981674, 1.89962179044, 73.29712585900],
                [0.00272328168, 3.35823706307, 149.56319713460],
                [0.00070328461, 5.39254450063, 63.73589830340],
                [0.00068892678, 6.09292483287, 76.26607127560],
                [0.00061998615, 2.26952066061, 2.96894541660],
                [0.00061950719, 2.85098872691, 11.04570026390],
                [0.00026468770, 3.14152083966, 71.81265315070],
                [0.00025710476, 6.11379840493, 454.90936652730],
                [0.00021078850, 4.36059339067, 148.07872442630],
                [0.00017818647, 1.74436930289, 36.64856292950],
                [0.00014613507, 4.73732166022, 3.93215326310],
                [0.00011162509, 5.82681796350, 224.34479570190],
                [0.00010997910, 0.48865004018, 138.51749687070],
                [0.00009527478, 2.95516862826, 35.16409022120],
                [0.00007545601, 5.23626582400, 109.94568878850],
                [0.00004220241, 3.23328220918, 70.84944530420],
                [0.00004051900, 2.27755017300, 151.04766984290],
                [0.00003354596, 1.06549007380, 4.45341812490],
                [0.00002926718, 4.62903718891, 9.56122755560],
                [0.00003490340, 5.48306144511, 146.59425171800],
                [0.00003144069, 4.75199570434, 77.75054398390],
                [0.00002922333, 5.35235361027, 85.82729883120],
                [0.00002272788, 4.36600400036, 70.32818044240],
                [0.00002051219, 1.51773566586, 0.11187458460],
                [0.00002148602, 0.60745949945, 38.13303563780],
                [0.00001991643, 4.92437588682, 277.03499374140],
                [0.00001376226, 2.04283539351, 65.22037101170],
                [0.00001666902, 3.62744066769, 380.12776796000],
                [0.00001284107, 3.11347961505, 202.25339517410],
                [0.00001150429, 0.93343589092, 3.18139373770],
                [0.00001533221, 2.58594681212, 52.69019803950],
                [0.00001281604, 0.54271272721, 222.86032299360],
                [0.00001372139, 4.19641530878, 111.43016149680],
                [0.00001221029, 0.19900650030, 108.46121608020],
                [0.00000946181, 1.19253165736, 127.47179660680],
                [0.00001150989, 4.17898916639, 33.67961751290]
            ],
            [
                [74.78159860910, 0.00000000000, 0.00000000000],
                [0.00154332863, 5.24158770553, 74.78159856730],
                [0.00024456474, 1.71260334156, 1.48447270830],
                [0.00009258442, 0.42829732350, 11.04570026390],
                [0.00008265977, 1.50218091379, 63.73589830340],
                [0.00009150160, 1.41213765216, 149.56319713460]
            ]
        ],
        [
            [
                [0.01346277648, 2.61877810547, 74.78159856730],
                [0.00062341400, 5.08111189648, 149.56319713460],
                [0.00061601196, 3.14159265359, 0.00000000000],
                [0.00009963722, 1.61603805646, 76.26607127560],
                [0.00009926160, 0.57630380333, 73.29712585900]
            ],
            [
                [0.00034101978, 0.01321929936, 74.78159856730]
            ]
        ],
        [
            [
                [19.21264847206, 0.00000000000, 0.00000000000],
                [0.88784984413, 5.60377527014, 74.78159856730],
                [0.03440836062, 0.32836099706, 73.29712585900],
                [0.02055653860, 1.78295159330, 149.56319713460],
                [0.00649322410, 4.52247285911, 76.26607127560],
                [0.00602247865, 3.86003823674, 63.73589830340],
                [0.00496404167, 1.40139935333, 454.90936652730],
                [0.00338525369, 1.58002770318, 138.51749687070],
                [0.00243509114, 1.57086606044, 71.81265315070],
                [0.00190522303, 1.99809394714, 1.48447270830],
                [0.00161858838, 2.79137786799, 148.07872442630],
                [0.00143706183, 1.38368544947, 11.04570026390],
                [0.00093192405, 0.17437220467, 36.64856292950],
                [0.00071424548, 4.24509236074, 224.34479570190],
                [0.00089806014, 3.66105364565, 109.94568878850],
                [0.00039009723, 1.66971401684, 70.84944530420],
                [0.00046677296, 1.39976401694, 35.16409022120],
                [0.00039025624, 3.36234773834, 277.03499374140],
                [0.00036755274, 3.88649278513, 146.59425171800],
                [0.00030348723, 0.70100838798, 151.04766984290],
                [0.00029156413, 3.18056336700, 77.75054398390],
                [0.00022637073, 0.72518687029, 529.69096509460],
                [0.00011959076, 1.75043392140, 984.60033162190],
                [0.00025620756, 5.25656086672, 380.12776796000]
            ],
            [
                [0.01479896629, 3.67205697578, 74.78159856730]
            ]
        ]
    ],
    Neptune: [
        [
            [
                [5.31188633046, 0.00000000000, 0.00000000000],
                [0.01798475530, 2.90101273890, 38.13303563780],
                [0.01019727652, 0.48580922867, 1.48447270830],
                [0.00124531845, 4.83008090676, 36.64856292950],
                [0.00042064466, 5.41054993053, 2.96894541660],
                [0.00037714584, 6.09221808686, 35.16409022120],
                [0.00033784738, 1.24488874087, 76.26607127560],
                [0.00016482741, 0.00007727998, 491.55792945680],
                [0.00009198584, 4.93747051954, 39.61750834610],
                [0.00008994250, 0.27462171806, 175.16605980020]
            ],
            [
                [38.13303563957, 0.00000000000, 0.00000000000],
                [0.00016604172, 4.86323329249, 1.48447270830],
                [0.00015744045, 2.27887427527, 38.13303563780]
            ]
        ],
        [
            [
                [0.03088622933, 1.44104372644, 38.13303563780],
                [0.00027780087, 5.91271884599, 76.26607127560],
                [0.00027623609, 0.00000000000, 0.00000000000],
                [0.00015355489, 2.52123799551, 36.64856292950],
                [0.00015448133, 3.50877079215, 39.61750834610]
            ]
        ],
        [
            [
                [30.07013205828, 0.00000000000, 0.00000000000],
                [0.27062259632, 1.32999459377, 38.13303563780],
                [0.01691764014, 3.25186135653, 36.64856292950],
                [0.00807830553, 5.18592878704, 1.48447270830],
                [0.00537760510, 4.52113935896, 35.16409022120],
                [0.00495725141, 1.57105641650, 491.55792945680],
                [0.00274571975, 1.84552258866, 175.16605980020],
                [0.00012012320, 1.92059384991, 1021.24889455140],
                [0.00121801746, 5.79754470298, 76.26607127560],
                [0.00100896068, 0.37702724930, 73.29712585900],
                [0.00135134092, 3.37220609835, 39.61750834610],
                [0.00007571796, 1.07149207335, 388.46515523820]
            ]
        ]
    ]
};
function DeltaT_EspenakMeeus(ut) {
    var u, u2, u3, u4, u5, u6, u7;
    /*
        Fred Espenak writes about Delta-T generically here:
        https://eclipse.gsfc.nasa.gov/SEhelp/deltaT.html
        https://eclipse.gsfc.nasa.gov/SEhelp/deltat2004.html

        He provides polynomial approximations for distant years here:
        https://eclipse.gsfc.nasa.gov/SEhelp/deltatpoly2004.html

        They start with a year value 'y' such that y=2000 corresponds
        to the UTC Date 15-January-2000. Convert difference in days
        to mean tropical years.
    */
    const y = 2000 + ((ut - 14) / DAYS_PER_TROPICAL_YEAR);
    if (y < -500) {
        u = (y - 1820) / 100;
        return -20 + (32 * u * u);
    }
    if (y < 500) {
        u = y / 100;
        u2 = u * u;
        u3 = u * u2;
        u4 = u2 * u2;
        u5 = u2 * u3;
        u6 = u3 * u3;
        return 10583.6 - 1014.41 * u + 33.78311 * u2 - 5.952053 * u3 - 0.1798452 * u4 + 0.022174192 * u5 + 0.0090316521 * u6;
    }
    if (y < 1600) {
        u = (y - 1000) / 100;
        u2 = u * u;
        u3 = u * u2;
        u4 = u2 * u2;
        u5 = u2 * u3;
        u6 = u3 * u3;
        return 1574.2 - 556.01 * u + 71.23472 * u2 + 0.319781 * u3 - 0.8503463 * u4 - 0.005050998 * u5 + 0.0083572073 * u6;
    }
    if (y < 1700) {
        u = y - 1600;
        u2 = u * u;
        u3 = u * u2;
        return 120 - 0.9808 * u - 0.01532 * u2 + u3 / 7129.0;
    }
    if (y < 1800) {
        u = y - 1700;
        u2 = u * u;
        u3 = u * u2;
        u4 = u2 * u2;
        return 8.83 + 0.1603 * u - 0.0059285 * u2 + 0.00013336 * u3 - u4 / 1174000;
    }
    if (y < 1860) {
        u = y - 1800;
        u2 = u * u;
        u3 = u * u2;
        u4 = u2 * u2;
        u5 = u2 * u3;
        u6 = u3 * u3;
        u7 = u3 * u4;
        return 13.72 - 0.332447 * u + 0.0068612 * u2 + 0.0041116 * u3 - 0.00037436 * u4 + 0.0000121272 * u5 - 0.0000001699 * u6 + 0.000000000875 * u7;
    }
    if (y < 1900) {
        u = y - 1860;
        u2 = u * u;
        u3 = u * u2;
        u4 = u2 * u2;
        u5 = u2 * u3;
        return 7.62 + 0.5737 * u - 0.251754 * u2 + 0.01680668 * u3 - 0.0004473624 * u4 + u5 / 233174;
    }
    if (y < 1920) {
        u = y - 1900;
        u2 = u * u;
        u3 = u * u2;
        u4 = u2 * u2;
        return -2.79 + 1.494119 * u - 0.0598939 * u2 + 0.0061966 * u3 - 0.000197 * u4;
    }
    if (y < 1941) {
        u = y - 1920;
        u2 = u * u;
        u3 = u * u2;
        return 21.20 + 0.84493 * u - 0.076100 * u2 + 0.0020936 * u3;
    }
    if (y < 1961) {
        u = y - 1950;
        u2 = u * u;
        u3 = u * u2;
        return 29.07 + 0.407 * u - u2 / 233 + u3 / 2547;
    }
    if (y < 1986) {
        u = y - 1975;
        u2 = u * u;
        u3 = u * u2;
        return 45.45 + 1.067 * u - u2 / 260 - u3 / 718;
    }
    if (y < 2005) {
        u = y - 2000;
        u2 = u * u;
        u3 = u * u2;
        u4 = u2 * u2;
        u5 = u2 * u3;
        return 63.86 + 0.3345 * u - 0.060374 * u2 + 0.0017275 * u3 + 0.000651814 * u4 + 0.00002373599 * u5;
    }
    if (y < 2050) {
        u = y - 2000;
        return 62.92 + 0.32217 * u + 0.005589 * u * u;
    }
    if (y < 2150) {
        u = (y - 1820) / 100;
        return -20 + 32 * u * u - 0.5628 * (2150 - y);
    }
    /* all years after 2150 */
    u = (y - 1820) / 100;
    return -20 + (32 * u * u);
}
let DeltaT = DeltaT_EspenakMeeus;
/**
 * @ignore
 *
 * @brief Calculates Terrestrial Time (TT) from Universal Time (UT).
 *
 * @param {number} ut
 *      The Universal Time expressed as a floating point number of days since the 2000.0 epoch.
 *
 * @returns {number}
 *      A Terrestrial Time expressed as a floating point number of days since the 2000.0 epoch.
 */
function TerrestrialTime(ut) {
    return ut + DeltaT(ut) / 86400;
}
/**
 * @brief The date and time of an astronomical observation.
 *
 * Objects of type `AstroTime` are used throughout the internals
 * of the Astronomy library, and are included in certain return objects.
 * Use the constructor or the {@link MakeTime} function to create an `AstroTime` object.
 *
 * @property {Date} date
 *      The JavaScript Date object for the given date and time.
 *      This Date corresponds to the numeric day value stored in the `ut` property.
 *
 * @property {number} ut
 *      Universal Time (UT1/UTC) in fractional days since the J2000 epoch.
 *      Universal Time represents time measured with respect to the Earth's rotation,
 *      tracking mean solar days.
 *      The Astronomy library approximates UT1 and UTC as being the same thing.
 *      This gives sufficient accuracy for the precision requirements of this project.
 *
 * @property {number} tt
 *      Terrestrial Time in fractional days since the J2000 epoch.
 *      TT represents a continuously flowing ephemeris timescale independent of
 *      any variations of the Earth's rotation, and is adjusted from UT
 *      using a best-fit piecewise polynomial model devised by
 *      [Espenak and Meeus](https://eclipse.gsfc.nasa.gov/SEhelp/deltatpoly2004.html).
 */
class AstroTime {
    /**
     * @param {FlexibleDateTime} date
     *      A JavaScript Date object, a numeric UTC value expressed in J2000 days, or another AstroTime object.
     */
    constructor(date) {
        if (date instanceof AstroTime) {
            // Construct a clone of the AstroTime passed in.
            this.date = date.date;
            this.ut = date.ut;
            this.tt = date.tt;
            return;
        }
        const MillisPerDay = 1000 * 3600 * 24;
        if ((date instanceof Date) && Number.isFinite(date.getTime())) {
            this.date = date;
            this.ut = (date.getTime() - J2000.getTime()) / MillisPerDay;
            this.tt = TerrestrialTime(this.ut);
            return;
        }
        if (Number.isFinite(date)) {
            this.date = new Date(J2000.getTime() + date * MillisPerDay);
            this.ut = date;
            this.tt = TerrestrialTime(this.ut);
            return;
        }
        throw 'Argument must be a Date object, an AstroTime object, or a numeric UTC Julian date.';
    }
    /**
     * @brief Creates an `AstroTime` value from a Terrestrial Time (TT) day value.
     *
     * This function can be used in rare cases where a time must be based
     * on Terrestrial Time (TT) rather than Universal Time (UT).
     * Most developers will want to invoke `new AstroTime(ut)` with a universal time
     * instead of this function, because usually time is based on civil time adjusted
     * by leap seconds to match the Earth's rotation, rather than the uniformly
     * flowing TT used to calculate solar system dynamics. In rare cases
     * where the caller already knows TT, this function is provided to create
     * an `AstroTime` value that can be passed to Astronomy Engine functions.
     *
     * @param {number} tt
     *      The number of days since the J2000 epoch as expressed in Terrestrial Time.
     *
     * @returns {AstroTime}
     *      An `AstroTime` object for the specified terrestrial time.
     */
    static FromTerrestrialTime(tt) {
        let time = new AstroTime(tt);
        for (;;) {
            const err = tt - time.tt;
            if (Math.abs(err) < 1.0e-12)
                return time;
            time = time.AddDays(err);
        }
    }
    /**
     * Formats an `AstroTime` object as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * date/time string in UTC, to millisecond resolution.
     * Example: `2018-08-17T17:22:04.050Z`
     * @returns {string}
     */
    toString() {
        return this.date.toISOString();
    }
    /**
     * Returns a new `AstroTime` object adjusted by the floating point number of days.
     * Does NOT modify the original `AstroTime` object.
     *
     * @param {number} days
     *      The floating point number of days by which to adjust the given date and time.
     *      Positive values adjust the date toward the future, and
     *      negative values adjust the date toward the past.
     *
     * @returns {AstroTime}
     */
    AddDays(days) {
        // This is slightly wrong, but the error is tiny.
        // We really should be adding to TT, not to UT.
        // But using TT would require creating an inverse function for DeltaT,
        // which would be quite a bit of extra calculation.
        // I estimate the error is in practice on the order of 10^(-7)
        // times the value of 'days'.
        // This is based on a typical drift of 1 second per year between UT and TT.
        return new AstroTime(this.ut + days);
    }
}
function InterpolateTime(time1, time2, fraction) {
    return new AstroTime(time1.ut + fraction * (time2.ut - time1.ut));
}
/**
 * @brief A `Date`, `number`, or `AstroTime` value that specifies the date and time of an astronomical event.
 *
 * `FlexibleDateTime` is a placeholder type that represents three different types
 * that may be passed to many Astronomy Engine functions: a JavaScript `Date` object,
 * a number representing the real-valued number of UT days since the J2000 epoch,
 * or an {@link AstroTime} object.
 *
 * This flexibility is for convenience of outside callers.
 * Internally, Astronomy Engine always converts a `FlexibleDateTime` parameter
 * to an `AstroTime` object by calling {@link MakeTime}.
 *
 * @typedef {Date | number | AstroTime} FlexibleDateTime
 */
/**
 * @brief Converts multiple date/time formats to `AstroTime` format.
 *
 * Given a Date object or a number days since noon (12:00) on January 1, 2000 (UTC),
 * this function creates an {@link AstroTime} object.
 *
 * Given an {@link AstroTime} object, returns the same object unmodified.
 * Use of this function is not required for any of the other exposed functions in this library,
 * because they all guarantee converting date/time parameters to `AstroTime`
 * as needed. However, it may be convenient for callers who need to understand
 * the difference between UTC and TT (Terrestrial Time). In some use cases,
 * converting once to `AstroTime` format and passing the result into multiple
 * function calls may be more efficient than passing in native JavaScript Date objects.
 *
 * @param {FlexibleDateTime} date
 *      A Date object, a number of UTC days since the J2000 epoch (noon on January 1, 2000),
 *      or an AstroTime object. See remarks above.
 *
 * @returns {AstroTime}
 */
function MakeTime(date) {
    if (date instanceof AstroTime) {
        return date;
    }
    return new AstroTime(date);
}
function iau2000b(time) {
    function mod(x) {
        return (x % ASEC360) * ASEC2RAD;
    }
    const t = time.tt / 36525;
    const elp = mod(1287104.79305 + t * 129596581.0481);
    const f = mod(335779.526232 + t * 1739527262.8478);
    const d = mod(1072260.70369 + t * 1602961601.2090);
    const om = mod(450160.398036 - t * 6962890.5431);
    let sarg = Math.sin(om);
    let carg = Math.cos(om);
    let dp = (-172064161 - 174666.0 * t) * sarg + 33386.0 * carg;
    let de = (92052331.0 + 9086.0 * t) * carg + 15377.0 * sarg;
    let arg = 2.0 * (f - d + om);
    sarg = Math.sin(arg);
    carg = Math.cos(arg);
    dp += (-13170906 - 1675.0 * t) * sarg - 13696.0 * carg;
    de += (5730336.0 - 3015.0 * t) * carg - 4587.0 * sarg;
    arg = 2.0 * (f + om);
    sarg = Math.sin(arg);
    carg = Math.cos(arg);
    dp += (-2276413 - 234.0 * t) * sarg + 2796.0 * carg;
    de += (978459.0 - 485.0 * t) * carg + 1374.0 * sarg;
    arg = 2.0 * om;
    sarg = Math.sin(arg);
    carg = Math.cos(arg);
    dp += (2074554.0 + 207.0 * t) * sarg - 698.0 * carg;
    de += (-897492 + 470.0 * t) * carg - 291.0 * sarg;
    sarg = Math.sin(elp);
    carg = Math.cos(elp);
    dp += (1475877.0 - 3633.0 * t) * sarg + 11817.0 * carg;
    de += (73871.0 - 184.0 * t) * carg - 1924.0 * sarg;
    return {
        dpsi: -135e-6 + (dp * 1.0e-7),
        deps: 388e-6 + (de * 1.0e-7)
    };
}
function mean_obliq(time) {
    var t = time.tt / 36525;
    var asec = (((((-4.34e-8 * t
        - 0.000000576) * t
        + 0.00200340) * t
        - 0.0001831) * t
        - 46.836769) * t + 84381.406);
    return asec / 3600.0;
}
var cache_e_tilt;
function e_tilt(time) {
    if (!cache_e_tilt || Math.abs(cache_e_tilt.tt - time.tt) > 1.0e-6) {
        const nut = iau2000b(time);
        const mean_ob = mean_obliq(time);
        const true_ob = mean_ob + (nut.deps / 3600);
        cache_e_tilt = {
            tt: time.tt,
            dpsi: nut.dpsi,
            deps: nut.deps,
            ee: nut.dpsi * Math.cos(mean_ob * DEG2RAD) / 15,
            mobl: mean_ob,
            tobl: true_ob
        };
    }
    return cache_e_tilt;
}
function obl_ecl2equ_vec(oblDegrees, pos) {
    const obl = oblDegrees * DEG2RAD;
    const cos_obl = Math.cos(obl);
    const sin_obl = Math.sin(obl);
    return [
        pos[0],
        pos[1] * cos_obl - pos[2] * sin_obl,
        pos[1] * sin_obl + pos[2] * cos_obl
    ];
}
function ecl2equ_vec(time, pos) {
    return obl_ecl2equ_vec(mean_obliq(time), pos);
}
function CalcMoon(time) {
    const T = time.tt / 36525;
    function DeclareArray1(xmin, xmax) {
        const array = [];
        let i;
        for (i = 0; i <= xmax - xmin; ++i) {
            array.push(0);
        }
        return { min: xmin, array: array };
    }
    function DeclareArray2(xmin, xmax, ymin, ymax) {
        const array = [];
        for (let i = 0; i <= xmax - xmin; ++i) {
            array.push(DeclareArray1(ymin, ymax));
        }
        return { min: xmin, array: array };
    }
    function ArrayGet2(a, x, y) {
        const m = a.array[x - a.min];
        return m.array[y - m.min];
    }
    function ArraySet2(a, x, y, v) {
        const m = a.array[x - a.min];
        m.array[y - m.min] = v;
    }
    let S, MAX, ARG, FAC, I, J, T2, DGAM, DLAM, N, GAM1C, SINPI, L0, L, LS, F, D, DL0, DL, DLS, DF, DD, DS;
    let coArray = DeclareArray2(-6, 6, 1, 4);
    let siArray = DeclareArray2(-6, 6, 1, 4);
    function CO(x, y) {
        return ArrayGet2(coArray, x, y);
    }
    function SI(x, y) {
        return ArrayGet2(siArray, x, y);
    }
    function SetCO(x, y, v) {
        return ArraySet2(coArray, x, y, v);
    }
    function SetSI(x, y, v) {
        return ArraySet2(siArray, x, y, v);
    }
    function AddThe(c1, s1, c2, s2, func) {
        func(c1 * c2 - s1 * s2, s1 * c2 + c1 * s2);
    }
    function Sine(phi) {
        return Math.sin(PI2 * phi);
    }
    T2 = T * T;
    DLAM = 0;
    DS = 0;
    GAM1C = 0;
    SINPI = 3422.7000;
    var S1 = Sine(0.19833 + 0.05611 * T);
    var S2 = Sine(0.27869 + 0.04508 * T);
    var S3 = Sine(0.16827 - 0.36903 * T);
    var S4 = Sine(0.34734 - 5.37261 * T);
    var S5 = Sine(0.10498 - 5.37899 * T);
    var S6 = Sine(0.42681 - 0.41855 * T);
    var S7 = Sine(0.14943 - 5.37511 * T);
    DL0 = 0.84 * S1 + 0.31 * S2 + 14.27 * S3 + 7.26 * S4 + 0.28 * S5 + 0.24 * S6;
    DL = 2.94 * S1 + 0.31 * S2 + 14.27 * S3 + 9.34 * S4 + 1.12 * S5 + 0.83 * S6;
    DLS = -6.4 * S1 - 1.89 * S6;
    DF = 0.21 * S1 + 0.31 * S2 + 14.27 * S3 - 88.70 * S4 - 15.30 * S5 + 0.24 * S6 - 1.86 * S7;
    DD = DL0 - DLS;
    DGAM = (-3332e-9 * Sine(0.59734 - 5.37261 * T)
        - 539E-9 * Sine(0.35498 - 5.37899 * T)
        - 64E-9 * Sine(0.39943 - 5.37511 * T));
    L0 = PI2 * Frac(0.60643382 + 1336.85522467 * T - 0.00000313 * T2) + DL0 / ARC;
    L = PI2 * Frac(0.37489701 + 1325.55240982 * T + 0.00002565 * T2) + DL / ARC;
    LS = PI2 * Frac(0.99312619 + 99.99735956 * T - 0.00000044 * T2) + DLS / ARC;
    F = PI2 * Frac(0.25909118 + 1342.22782980 * T - 0.00000892 * T2) + DF / ARC;
    D = PI2 * Frac(0.82736186 + 1236.85308708 * T - 0.00000397 * T2) + DD / ARC;
    for (I = 1; I <= 4; ++I) {
        switch (I) {
            case 1:
                ARG = L;
                MAX = 4;
                FAC = 1.000002208;
                break;
            case 2:
                ARG = LS;
                MAX = 3;
                FAC = 0.997504612 - 0.002495388 * T;
                break;
            case 3:
                ARG = F;
                MAX = 4;
                FAC = 1.000002708 + 139.978 * DGAM;
                break;
            case 4:
                ARG = D;
                MAX = 6;
                FAC = 1.0;
                break;
            default: throw `Internal error: I = ${I}`; // persuade TypeScript that ARG, ... are all initialized before use.
        }
        SetCO(0, I, 1);
        SetCO(1, I, Math.cos(ARG) * FAC);
        SetSI(0, I, 0);
        SetSI(1, I, Math.sin(ARG) * FAC);
        for (J = 2; J <= MAX; ++J) {
            AddThe(CO(J - 1, I), SI(J - 1, I), CO(1, I), SI(1, I), (c, s) => (SetCO(J, I, c), SetSI(J, I, s)));
        }
        for (J = 1; J <= MAX; ++J) {
            SetCO(-J, I, CO(J, I));
            SetSI(-J, I, -SI(J, I));
        }
    }
    function Term(p, q, r, s) {
        var result = { x: 1, y: 0 };
        var I = [0, p, q, r, s]; // I[0] is not used; it is a placeholder
        for (var k = 1; k <= 4; ++k)
            if (I[k] !== 0)
                AddThe(result.x, result.y, CO(I[k], k), SI(I[k], k), (c, s) => (result.x = c, result.y = s));
        return result;
    }
    function AddSol(coeffl, coeffs, coeffg, coeffp, p, q, r, s) {
        var result = Term(p, q, r, s);
        DLAM += coeffl * result.y;
        DS += coeffs * result.y;
        GAM1C += coeffg * result.x;
        SINPI += coeffp * result.x;
    }
    AddSol(13.9020, 14.0600, -1e-3, 0.2607, 0, 0, 0, 4);
    AddSol(0.4030, -4.01, 0.3940, 0.0023, 0, 0, 0, 3);
    AddSol(2369.9120, 2373.3600, 0.6010, 28.2333, 0, 0, 0, 2);
    AddSol(-125.154, -112.79, -0.725, -0.9781, 0, 0, 0, 1);
    AddSol(1.9790, 6.9800, -0.445, 0.0433, 1, 0, 0, 4);
    AddSol(191.9530, 192.7200, 0.0290, 3.0861, 1, 0, 0, 2);
    AddSol(-8.466, -13.51, 0.4550, -0.1093, 1, 0, 0, 1);
    AddSol(22639.5000, 22609.0700, 0.0790, 186.5398, 1, 0, 0, 0);
    AddSol(18.6090, 3.5900, -0.094, 0.0118, 1, 0, 0, -1);
    AddSol(-4586.465, -4578.13, -0.077, 34.3117, 1, 0, 0, -2);
    AddSol(3.2150, 5.4400, 0.1920, -0.0386, 1, 0, 0, -3);
    AddSol(-38.428, -38.64, 0.0010, 0.6008, 1, 0, 0, -4);
    AddSol(-0.393, -1.43, -0.092, 0.0086, 1, 0, 0, -6);
    AddSol(-0.289, -1.59, 0.1230, -53e-4, 0, 1, 0, 4);
    AddSol(-24.42, -25.1, 0.0400, -0.3, 0, 1, 0, 2);
    AddSol(18.0230, 17.9300, 0.0070, 0.1494, 0, 1, 0, 1);
    AddSol(-668.146, -126.98, -1.302, -0.3997, 0, 1, 0, 0);
    AddSol(0.5600, 0.3200, -1e-3, -37e-4, 0, 1, 0, -1);
    AddSol(-165.145, -165.06, 0.0540, 1.9178, 0, 1, 0, -2);
    AddSol(-1.877, -6.46, -0.416, 0.0339, 0, 1, 0, -4);
    AddSol(0.2130, 1.0200, -0.074, 0.0054, 2, 0, 0, 4);
    AddSol(14.3870, 14.7800, -0.017, 0.2833, 2, 0, 0, 2);
    AddSol(-0.586, -1.2, 0.0540, -0.01, 2, 0, 0, 1);
    AddSol(769.0160, 767.9600, 0.1070, 10.1657, 2, 0, 0, 0);
    AddSol(1.7500, 2.0100, -0.018, 0.0155, 2, 0, 0, -1);
    AddSol(-211.656, -152.53, 5.6790, -0.3039, 2, 0, 0, -2);
    AddSol(1.2250, 0.9100, -0.03, -88e-4, 2, 0, 0, -3);
    AddSol(-30.773, -34.07, -0.308, 0.3722, 2, 0, 0, -4);
    AddSol(-0.57, -1.4, -0.074, 0.0109, 2, 0, 0, -6);
    AddSol(-2.921, -11.75, 0.7870, -0.0484, 1, 1, 0, 2);
    AddSol(1.2670, 1.5200, -0.022, 0.0164, 1, 1, 0, 1);
    AddSol(-109.673, -115.18, 0.4610, -0.949, 1, 1, 0, 0);
    AddSol(-205.962, -182.36, 2.0560, 1.4437, 1, 1, 0, -2);
    AddSol(0.2330, 0.3600, 0.0120, -25e-4, 1, 1, 0, -3);
    AddSol(-4.391, -9.66, -0.471, 0.0673, 1, 1, 0, -4);
    AddSol(0.2830, 1.5300, -0.111, 0.0060, 1, -1, 0, 4);
    AddSol(14.5770, 31.7000, -1.54, 0.2302, 1, -1, 0, 2);
    AddSol(147.6870, 138.7600, 0.6790, 1.1528, 1, -1, 0, 0);
    AddSol(-1.089, 0.5500, 0.0210, 0.0000, 1, -1, 0, -1);
    AddSol(28.4750, 23.5900, -0.443, -0.2257, 1, -1, 0, -2);
    AddSol(-0.276, -0.38, -6e-3, -36e-4, 1, -1, 0, -3);
    AddSol(0.6360, 2.2700, 0.1460, -0.0102, 1, -1, 0, -4);
    AddSol(-0.189, -1.68, 0.1310, -28e-4, 0, 2, 0, 2);
    AddSol(-7.486, -0.66, -0.037, -86e-4, 0, 2, 0, 0);
    AddSol(-8.096, -16.35, -0.74, 0.0918, 0, 2, 0, -2);
    AddSol(-5.741, -0.04, 0.0000, -9e-4, 0, 0, 2, 2);
    AddSol(0.2550, 0.0000, 0.0000, 0.0000, 0, 0, 2, 1);
    AddSol(-411.608, -0.2, 0.0000, -0.0124, 0, 0, 2, 0);
    AddSol(0.5840, 0.8400, 0.0000, 0.0071, 0, 0, 2, -1);
    AddSol(-55.173, -52.14, 0.0000, -0.1052, 0, 0, 2, -2);
    AddSol(0.2540, 0.2500, 0.0000, -17e-4, 0, 0, 2, -3);
    AddSol(0.0250, -1.67, 0.0000, 0.0031, 0, 0, 2, -4);
    AddSol(1.0600, 2.9600, -0.166, 0.0243, 3, 0, 0, 2);
    AddSol(36.1240, 50.6400, -1.3, 0.6215, 3, 0, 0, 0);
    AddSol(-13.193, -16.4, 0.2580, -0.1187, 3, 0, 0, -2);
    AddSol(-1.187, -0.74, 0.0420, 0.0074, 3, 0, 0, -4);
    AddSol(-0.293, -0.31, -2e-3, 0.0046, 3, 0, 0, -6);
    AddSol(-0.29, -1.45, 0.1160, -51e-4, 2, 1, 0, 2);
    AddSol(-7.649, -10.56, 0.2590, -0.1038, 2, 1, 0, 0);
    AddSol(-8.627, -7.59, 0.0780, -0.0192, 2, 1, 0, -2);
    AddSol(-2.74, -2.54, 0.0220, 0.0324, 2, 1, 0, -4);
    AddSol(1.1810, 3.3200, -0.212, 0.0213, 2, -1, 0, 2);
    AddSol(9.7030, 11.6700, -0.151, 0.1268, 2, -1, 0, 0);
    AddSol(-0.352, -0.37, 0.0010, -28e-4, 2, -1, 0, -1);
    AddSol(-2.494, -1.17, -3e-3, -17e-4, 2, -1, 0, -2);
    AddSol(0.3600, 0.2000, -0.012, -43e-4, 2, -1, 0, -4);
    AddSol(-1.167, -1.25, 0.0080, -0.0106, 1, 2, 0, 0);
    AddSol(-7.412, -6.12, 0.1170, 0.0484, 1, 2, 0, -2);
    AddSol(-0.311, -0.65, -0.032, 0.0044, 1, 2, 0, -4);
    AddSol(0.7570, 1.8200, -0.105, 0.0112, 1, -2, 0, 2);
    AddSol(2.5800, 2.3200, 0.0270, 0.0196, 1, -2, 0, 0);
    AddSol(2.5330, 2.4000, -0.014, -0.0212, 1, -2, 0, -2);
    AddSol(-0.344, -0.57, -0.025, 0.0036, 0, 3, 0, -2);
    AddSol(-0.992, -0.02, 0.0000, 0.0000, 1, 0, 2, 2);
    AddSol(-45.099, -0.02, 0.0000, -1e-3, 1, 0, 2, 0);
    AddSol(-0.179, -9.52, 0.0000, -0.0833, 1, 0, 2, -2);
    AddSol(-0.301, -0.33, 0.0000, 0.0014, 1, 0, 2, -4);
    AddSol(-6.382, -3.37, 0.0000, -0.0481, 1, 0, -2, 2);
    AddSol(39.5280, 85.1300, 0.0000, -0.7136, 1, 0, -2, 0);
    AddSol(9.3660, 0.7100, 0.0000, -0.0112, 1, 0, -2, -2);
    AddSol(0.2020, 0.0200, 0.0000, 0.0000, 1, 0, -2, -4);
    AddSol(0.4150, 0.1000, 0.0000, 0.0013, 0, 1, 2, 0);
    AddSol(-2.152, -2.26, 0.0000, -66e-4, 0, 1, 2, -2);
    AddSol(-1.44, -1.3, 0.0000, 0.0014, 0, 1, -2, 2);
    AddSol(0.3840, -0.04, 0.0000, 0.0000, 0, 1, -2, -2);
    AddSol(1.9380, 3.6000, -0.145, 0.0401, 4, 0, 0, 0);
    AddSol(-0.952, -1.58, 0.0520, -0.013, 4, 0, 0, -2);
    AddSol(-0.551, -0.94, 0.0320, -97e-4, 3, 1, 0, 0);
    AddSol(-0.482, -0.57, 0.0050, -45e-4, 3, 1, 0, -2);
    AddSol(0.6810, 0.9600, -0.026, 0.0115, 3, -1, 0, 0);
    AddSol(-0.297, -0.27, 0.0020, -9e-4, 2, 2, 0, -2);
    AddSol(0.2540, 0.2100, -3e-3, 0.0000, 2, -2, 0, -2);
    AddSol(-0.25, -0.22, 0.0040, 0.0014, 1, 3, 0, -2);
    AddSol(-3.996, 0.0000, 0.0000, 0.0004, 2, 0, 2, 0);
    AddSol(0.5570, -0.75, 0.0000, -9e-3, 2, 0, 2, -2);
    AddSol(-0.459, -0.38, 0.0000, -53e-4, 2, 0, -2, 2);
    AddSol(-1.298, 0.7400, 0.0000, 0.0004, 2, 0, -2, 0);
    AddSol(0.5380, 1.1400, 0.0000, -0.0141, 2, 0, -2, -2);
    AddSol(0.2630, 0.0200, 0.0000, 0.0000, 1, 1, 2, 0);
    AddSol(0.4260, 0.0700, 0.0000, -6e-4, 1, 1, -2, -2);
    AddSol(-0.304, 0.0300, 0.0000, 0.0003, 1, -1, 2, 0);
    AddSol(-0.372, -0.19, 0.0000, -27e-4, 1, -1, -2, 2);
    AddSol(0.4180, 0.0000, 0.0000, 0.0000, 0, 0, 4, 0);
    AddSol(-0.33, -0.04, 0.0000, 0.0000, 3, 0, 2, 0);
    function ADDN(coeffn, p, q, r, s) {
        return coeffn * Term(p, q, r, s).y;
    }
    N = 0;
    N += ADDN(-526.069, 0, 0, 1, -2);
    N += ADDN(-3.352, 0, 0, 1, -4);
    N += ADDN(44.297, 1, 0, 1, -2);
    N += ADDN(-6, 1, 0, 1, -4);
    N += ADDN(20.599, -1, 0, 1, 0);
    N += ADDN(-30.598, -1, 0, 1, -2);
    N += ADDN(-24.649, -2, 0, 1, 0);
    N += ADDN(-2, -2, 0, 1, -2);
    N += ADDN(-22.571, 0, 1, 1, -2);
    N += ADDN(10.985, 0, -1, 1, -2);
    DLAM += (0.82 * Sine(0.7736 - 62.5512 * T) + 0.31 * Sine(0.0466 - 125.1025 * T)
        + 0.35 * Sine(0.5785 - 25.1042 * T) + 0.66 * Sine(0.4591 + 1335.8075 * T)
        + 0.64 * Sine(0.3130 - 91.5680 * T) + 1.14 * Sine(0.1480 + 1331.2898 * T)
        + 0.21 * Sine(0.5918 + 1056.5859 * T) + 0.44 * Sine(0.5784 + 1322.8595 * T)
        + 0.24 * Sine(0.2275 - 5.7374 * T) + 0.28 * Sine(0.2965 + 2.6929 * T)
        + 0.33 * Sine(0.3132 + 6.3368 * T));
    S = F + DS / ARC;
    let lat_seconds = (1.000002708 + 139.978 * DGAM) * (18518.511 + 1.189 + GAM1C) * Math.sin(S) - 6.24 * Math.sin(3 * S) + N;
    return {
        geo_eclip_lon: PI2 * Frac((L0 + DLAM / ARC) / PI2),
        geo_eclip_lat: (Math.PI / (180 * 3600)) * lat_seconds,
        distance_au: (ARC * EARTH_EQUATORIAL_RADIUS_AU) / (0.999953253 * SINPI)
    };
}
function rotate(rot, vec) {
    return [
        rot.rot[0][0] * vec[0] + rot.rot[1][0] * vec[1] + rot.rot[2][0] * vec[2],
        rot.rot[0][1] * vec[0] + rot.rot[1][1] * vec[1] + rot.rot[2][1] * vec[2],
        rot.rot[0][2] * vec[0] + rot.rot[1][2] * vec[1] + rot.rot[2][2] * vec[2]
    ];
}
function precession(pos, time, dir) {
    const r = precession_rot(time, dir);
    return rotate(r, pos);
}
function precession_rot(time, dir) {
    const t = time.tt / 36525;
    let eps0 = 84381.406;
    let psia = (((((-9.51e-8 * t
        + 0.000132851) * t
        - 0.00114045) * t
        - 1.0790069) * t
        + 5038.481507) * t);
    let omegaa = (((((3.337e-7 * t
        - 0.000000467) * t
        - 0.00772503) * t
        + 0.0512623) * t
        - 0.025754) * t + eps0);
    let chia = (((((-56e-9 * t
        + 0.000170663) * t
        - 0.00121197) * t
        - 2.3814292) * t
        + 10.556403) * t);
    eps0 *= ASEC2RAD;
    psia *= ASEC2RAD;
    omegaa *= ASEC2RAD;
    chia *= ASEC2RAD;
    const sa = Math.sin(eps0);
    const ca = Math.cos(eps0);
    const sb = Math.sin(-psia);
    const cb = Math.cos(-psia);
    const sc = Math.sin(-omegaa);
    const cc = Math.cos(-omegaa);
    const sd = Math.sin(chia);
    const cd = Math.cos(chia);
    const xx = cd * cb - sb * sd * cc;
    const yx = cd * sb * ca + sd * cc * cb * ca - sa * sd * sc;
    const zx = cd * sb * sa + sd * cc * cb * sa + ca * sd * sc;
    const xy = -sd * cb - sb * cd * cc;
    const yy = -sd * sb * ca + cd * cc * cb * ca - sa * cd * sc;
    const zy = -sd * sb * sa + cd * cc * cb * sa + ca * cd * sc;
    const xz = sb * sc;
    const yz = -sc * cb * ca - sa * cc;
    const zz = -sc * cb * sa + cc * ca;
    if (dir === PrecessDirection.Into2000) {
        // Perform rotation from epoch to J2000.0.
        return new RotationMatrix([
            [xx, yx, zx],
            [xy, yy, zy],
            [xz, yz, zz]
        ]);
    }
    if (dir === PrecessDirection.From2000) {
        // Perform rotation from J2000.0 to epoch.
        return new RotationMatrix([
            [xx, xy, xz],
            [yx, yy, yz],
            [zx, zy, zz]
        ]);
    }
    throw 'Invalid precess direction';
}
function nutation(pos, time, dir) {
    const r = nutation_rot(time, dir);
    return rotate(r, pos);
}
function nutation_rot(time, dir) {
    const tilt = e_tilt(time);
    const oblm = tilt.mobl * DEG2RAD;
    const oblt = tilt.tobl * DEG2RAD;
    const psi = tilt.dpsi * ASEC2RAD;
    const cobm = Math.cos(oblm);
    const sobm = Math.sin(oblm);
    const cobt = Math.cos(oblt);
    const sobt = Math.sin(oblt);
    const cpsi = Math.cos(psi);
    const spsi = Math.sin(psi);
    const xx = cpsi;
    const yx = -spsi * cobm;
    const zx = -spsi * sobm;
    const xy = spsi * cobt;
    const yy = cpsi * cobm * cobt + sobm * sobt;
    const zy = cpsi * sobm * cobt - cobm * sobt;
    const xz = spsi * sobt;
    const yz = cpsi * cobm * sobt - sobm * cobt;
    const zz = cpsi * sobm * sobt + cobm * cobt;
    if (dir === PrecessDirection.From2000) {
        // convert J2000 to of-date
        return new RotationMatrix([
            [xx, xy, xz],
            [yx, yy, yz],
            [zx, zy, zz]
        ]);
    }
    if (dir === PrecessDirection.Into2000) {
        // convert of-date to J2000
        return new RotationMatrix([
            [xx, yx, zx],
            [xy, yy, zy],
            [xz, yz, zz]
        ]);
    }
    throw 'Invalid precess direction';
}
function gyration(pos, time, dir) {
    // Combine nutation and precession into a single operation I call "gyration".
    // The order they are composed depends on the direction,
    // because both directions are mutual inverse functions.
    return (dir === PrecessDirection.Into2000) ?
        precession(nutation(pos, time, dir), time, dir) :
        nutation(precession(pos, time, dir), time, dir);
}
/**
 * @brief A 3D Cartesian vector with a time attached to it.
 *
 * Holds the Cartesian coordinates of a vector in 3D space,
 * along with the time at which the vector is valid.
 *
 * @property {number} x        The x-coordinate expressed in astronomical units (AU).
 * @property {number} y        The y-coordinate expressed in astronomical units (AU).
 * @property {number} z        The z-coordinate expressed in astronomical units (AU).
 * @property {AstroTime} t     The time at which the vector is valid.
 */
class Vector {
    constructor(x, y, z, t) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.t = t;
    }
    /**
     * Returns the length of the vector in astronomical units (AU).
     * @returns {number}
     */
    Length() {
        return Math.hypot(this.x, this.y, this.z);
    }
}
/**
 * @brief A combination of a position vector, a velocity vector, and a time.
 *
 * Holds the state vector of a body at a given time, including its position,
 * velocity, and the time they are valid.
 *
 * @property {number} x        The position x-coordinate expressed in astronomical units (AU).
 * @property {number} y        The position y-coordinate expressed in astronomical units (AU).
 * @property {number} z        The position z-coordinate expressed in astronomical units (AU).
 * @property {number} vx       The velocity x-coordinate expressed in AU/day.
 * @property {number} vy       The velocity y-coordinate expressed in AU/day.
 * @property {number} vz       The velocity z-coordinate expressed in AU/day.
 * @property {AstroTime} t     The time at which the vector is valid.
 */
class StateVector {
    constructor(x, y, z, vx, vy, vz, t) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.vx = vx;
        this.vy = vy;
        this.vz = vz;
        this.t = t;
    }
}
/**
 * @brief Holds spherical coordinates: latitude, longitude, distance.
 *
 * Spherical coordinates represent the location of
 * a point using two angles and a distance.
 *
 * @property {number} lat       The latitude angle: -90..+90 degrees.
 * @property {number} lon       The longitude angle: 0..360 degrees.
 * @property {number} dist      Distance in AU.
 */
class Spherical {
    constructor(lat, lon, dist) {
        this.lat = VerifyNumber(lat);
        this.lon = VerifyNumber(lon);
        this.dist = VerifyNumber(dist);
    }
}
/**
 * @brief Contains a rotation matrix that can be used to transform one coordinate system to another.
 *
 * @property {number[][]} rot
 *      A normalized 3x3 rotation matrix. For example, the identity matrix is represented
 *      as `[[1, 0, 0], [0, 1, 0], [0, 0, 1]]`.
 */
class RotationMatrix {
    constructor(rot) {
        this.rot = rot;
    }
}
/**
 * @brief Ecliptic coordinates of a celestial body.
 *
 * The origin and date of the coordinate system may vary depending on the caller's usage.
 * In general, ecliptic coordinates are measured with respect to the mean plane of the Earth's
 * orbit around the Sun.
 * Includes Cartesian coordinates `(ex, ey, ez)` measured in
 * <a href="https://en.wikipedia.org/wiki/Astronomical_unit">astronomical units</a> (AU)
 * and spherical coordinates `(elon, elat)` measured in degrees.
 *
 * @property {Vector} vec
 *      Ecliptic cartesian vector with components measured in astronomical units (AU).
 *      The x-axis is within the ecliptic plane and is oriented in the direction of the
 *      <a href="https://en.wikipedia.org/wiki/Equinox_(celestial_coordinates)">equinox</a>.
 *      The y-axis is within the ecliptic plane and is oriented 90 degrees
 *      counterclockwise from the equinox, as seen from above the Sun's north pole.
 *      The z-axis is oriented perpendicular to the ecliptic plane,
 *      along the direction of the Sun's north pole.
 *
 * @property {number} elat
 *      The ecliptic latitude of the body in degrees.
 *      This is the angle north or south of the ecliptic plane.
 *      The value is in the range [-90, +90].
 *      Positive values are north and negative values are south.
 *
 * @property {number} elon
 *      The ecliptic longitude of the body in degrees.
 *      This is the angle measured counterclockwise around the ecliptic plane,
 *      as seen from above the Sun's north pole.
 *      This is the same direction that the Earth orbits around the Sun.
 *      The angle is measured starting at 0 from the equinox and increases
 *      up to 360 degrees.
 */
class EclipticCoordinates {
    constructor(vec, elat, elon) {
        this.vec = vec;
        this.elat = VerifyNumber(elat);
        this.elon = VerifyNumber(elon);
    }
}
/**
 * @brief Returns apparent geocentric true ecliptic coordinates of date for the Sun.
 *
 * This function is used for calculating the times of equinoxes and solstices.
 *
 * <i>Geocentric</i> means coordinates as the Sun would appear to a hypothetical observer
 * at the center of the Earth.
 * <i>Ecliptic coordinates of date</i> are measured along the plane of the Earth's mean
 * orbit around the Sun, using the
 * <a href="https://en.wikipedia.org/wiki/Equinox_(celestial_coordinates)">equinox</a>
 * of the Earth as adjusted for precession and nutation of the Earth's
 * axis of rotation on the given date.
 *
 * @param {FlexibleDateTime} date
 *      The date and time at which to calculate the Sun's apparent location as seen from
 *      the center of the Earth.
 *
 * @returns {EclipticCoordinates}
 */
function SunPosition(date) {
    // Correct for light travel time from the Sun.
    // This is really the same as correcting for aberration.
    // Otherwise season calculations (equinox, solstice) will all be early by about 8 minutes!
    const time = MakeTime(date).AddDays(-1 / C_AUDAY);
    // Get heliocentric cartesian coordinates of Earth in J2000.
    const earth2000 = CalcVsop(vsop.Earth, time);
    // Convert to geocentric location of the Sun.
    const sun2000 = [-earth2000.x, -earth2000.y, -earth2000.z];
    // Convert to equator-of-date equatorial cartesian coordinates.
    const [gx, gy, gz] = gyration(sun2000, time, PrecessDirection.From2000);
    // Convert to ecliptic coordinates of date.
    const true_obliq = DEG2RAD * e_tilt(time).tobl;
    const cos_ob = Math.cos(true_obliq);
    const sin_ob = Math.sin(true_obliq);
    const vec = new Vector(gx, gy, gz, time);
    const sun_ecliptic = RotateEquatorialToEcliptic(vec, cos_ob, sin_ob);
    return sun_ecliptic;
}
function RotateEquatorialToEcliptic(equ, cos_ob, sin_ob) {
    // Rotate equatorial vector to obtain ecliptic vector.
    const ex = equ.x;
    const ey = equ.y * cos_ob + equ.z * sin_ob;
    const ez = -equ.y * sin_ob + equ.z * cos_ob;
    const xyproj = Math.hypot(ex, ey);
    let elon = 0;
    if (xyproj > 0) {
        elon = RAD2DEG * Math.atan2(ey, ex);
        if (elon < 0)
            elon += 360;
    }
    let elat = RAD2DEG * Math.atan2(ez, xyproj);
    let ecl = new Vector(ex, ey, ez, equ.t);
    return new EclipticCoordinates(ecl, elat, elon);
}
/**
 * @brief Converts a J2000 mean equator (EQJ) vector to a true ecliptic of date (ETC) vector and angles.
 *
 * Given coordinates relative to the Earth's equator at J2000 (the instant of noon UTC
 * on 1 January 2000), this function converts those coordinates to true ecliptic coordinates
 * that are relative to the plane of the Earth's orbit around the Sun on that date.
 *
 * @param {Vector} eqj
 *      Equatorial coordinates in the EQJ frame of reference.
 *      You can call {@link GeoVector} to obtain suitable equatorial coordinates.
 *
 * @returns {EclipticCoordinates}
 */
function Ecliptic(eqj) {
    // Calculate nutation and obliquity for this time.
    // As an optimization, the nutation angles are cached in `time`,
    // and reused below when the `nutation` function is called.
    const et = e_tilt(eqj.t);
    // Convert mean J2000 equator (EQJ) to true equator of date (EQD).
    const eqj_pos = [eqj.x, eqj.y, eqj.z];
    const mean_pos = precession(eqj_pos, eqj.t, PrecessDirection.From2000);
    const [x, y, z] = nutation(mean_pos, eqj.t, PrecessDirection.From2000);
    const eqd = new Vector(x, y, z, eqj.t);
    // Rotate from EQD to true ecliptic of date (ECT).
    const tobl = et.tobl * DEG2RAD;
    return RotateEquatorialToEcliptic(eqd, Math.cos(tobl), Math.sin(tobl));
}
/**
 * @brief Calculates equatorial geocentric Cartesian coordinates for the Moon.
 *
 * Given a time of observation, calculates the Moon's position as a vector.
 * The vector gives the location of the Moon's center relative to the Earth's center
 * with x-, y-, and z-components measured in astronomical units.
 * The coordinates are oriented with respect to the Earth's equator at the J2000 epoch.
 * In Astronomy Engine, this orientation is called EQJ.
 * Based on the Nautical Almanac Office's <i>Improved Lunar Ephemeris</i> of 1954,
 * which in turn derives from E. W. Brown's lunar theories.
 * Adapted from Turbo Pascal code from the book
 * <a href="https://www.springer.com/us/book/9783540672210">Astronomy on the Personal Computer</a>
 * by Montenbruck and Pfleger.
 *
 * @param {FlexibleDateTime} date
 *      The date and time for which to calculate the Moon's geocentric position.
 *
 * @returns {Vector}
 */
function GeoMoon(date) {
    const time = MakeTime(date);
    const moon = CalcMoon(time);
    // Convert geocentric ecliptic spherical coords to cartesian coords.
    const dist_cos_lat = moon.distance_au * Math.cos(moon.geo_eclip_lat);
    const gepos = [
        dist_cos_lat * Math.cos(moon.geo_eclip_lon),
        dist_cos_lat * Math.sin(moon.geo_eclip_lon),
        moon.distance_au * Math.sin(moon.geo_eclip_lat)
    ];
    // Convert ecliptic coordinates to equatorial coordinates, both in mean equinox of date.
    const mpos1 = ecl2equ_vec(time, gepos);
    // Convert from mean equinox of date to J2000...
    const mpos2 = precession(mpos1, time, PrecessDirection.Into2000);
    return new Vector(mpos2[0], mpos2[1], mpos2[2], time);
}
function VsopFormula(formula, t, clamp_angle) {
    let tpower = 1;
    let coord = 0;
    for (let series of formula) {
        let sum = 0;
        for (let [ampl, phas, freq] of series)
            sum += ampl * Math.cos(phas + (t * freq));
        let incr = tpower * sum;
        if (clamp_angle)
            incr %= PI2; // improve precision for longitudes: they can be hundreds of radians
        coord += incr;
        tpower *= t;
    }
    return coord;
}
function VsopDeriv(formula, t) {
    let tpower = 1; // t^s
    let dpower = 0; // t^(s-1)
    let deriv = 0;
    let s = 0;
    for (let series of formula) {
        let sin_sum = 0;
        let cos_sum = 0;
        for (let [ampl, phas, freq] of series) {
            let angle = phas + (t * freq);
            sin_sum += ampl * freq * Math.sin(angle);
            if (s > 0)
                cos_sum += ampl * Math.cos(angle);
        }
        deriv += (s * dpower * cos_sum) - (tpower * sin_sum);
        dpower = tpower;
        tpower *= t;
        ++s;
    }
    return deriv;
}
const DAYS_PER_MILLENNIUM = 365250;
const LON_INDEX = 0;
const LAT_INDEX = 1;
const RAD_INDEX = 2;
function VsopRotate(eclip) {
    // Convert ecliptic cartesian coordinates to equatorial cartesian coordinates.
    return new TerseVector(eclip[0] + 0.000000440360 * eclip[1] - 0.000000190919 * eclip[2], -4.79966e-7 * eclip[0] + 0.917482137087 * eclip[1] - 0.397776982902 * eclip[2], 0.397776982902 * eclip[1] + 0.917482137087 * eclip[2]);
}
function VsopSphereToRect(lon, lat, radius) {
    // Convert spherical coordinates to ecliptic cartesian coordinates.
    const r_coslat = radius * Math.cos(lat);
    const coslon = Math.cos(lon);
    const sinlon = Math.sin(lon);
    return [
        r_coslat * coslon,
        r_coslat * sinlon,
        radius * Math.sin(lat)
    ];
}
function CalcVsop(model, time) {
    const t = time.tt / DAYS_PER_MILLENNIUM; // millennia since 2000
    const lon = VsopFormula(model[LON_INDEX], t, true);
    const lat = VsopFormula(model[LAT_INDEX], t, false);
    const rad = VsopFormula(model[RAD_INDEX], t, false);
    const eclip = VsopSphereToRect(lon, lat, rad);
    return VsopRotate(eclip).ToAstroVector(time);
}
function CalcVsopPosVel(model, tt) {
    const t = tt / DAYS_PER_MILLENNIUM;
    // Calculate the VSOP "B" trigonometric series to obtain ecliptic spherical coordinates.
    const lon = VsopFormula(model[LON_INDEX], t, true);
    const lat = VsopFormula(model[LAT_INDEX], t, false);
    const rad = VsopFormula(model[RAD_INDEX], t, false);
    const dlon_dt = VsopDeriv(model[LON_INDEX], t);
    const dlat_dt = VsopDeriv(model[LAT_INDEX], t);
    const drad_dt = VsopDeriv(model[RAD_INDEX], t);
    // Use spherical coords and spherical derivatives to calculate
    // the velocity vector in rectangular coordinates.
    const coslon = Math.cos(lon);
    const sinlon = Math.sin(lon);
    const coslat = Math.cos(lat);
    const sinlat = Math.sin(lat);
    const vx = (+(drad_dt * coslat * coslon)
        - (rad * sinlat * coslon * dlat_dt)
        - (rad * coslat * sinlon * dlon_dt));
    const vy = (+(drad_dt * coslat * sinlon)
        - (rad * sinlat * sinlon * dlat_dt)
        + (rad * coslat * coslon * dlon_dt));
    const vz = (+(drad_dt * sinlat)
        + (rad * coslat * dlat_dt));
    const eclip_pos = VsopSphereToRect(lon, lat, rad);
    // Convert speed units from [AU/millennium] to [AU/day].
    const eclip_vel = [
        vx / DAYS_PER_MILLENNIUM,
        vy / DAYS_PER_MILLENNIUM,
        vz / DAYS_PER_MILLENNIUM
    ];
    // Rotate the vectors from ecliptic to equatorial coordinates.
    const equ_pos = VsopRotate(eclip_pos);
    const equ_vel = VsopRotate(eclip_vel);
    return new body_state_t(tt, equ_pos, equ_vel);
}
function AdjustBarycenter(ssb, time, body, pmass) {
    const shift = pmass / (pmass + SUN_GM);
    const planet = CalcVsop(vsop[body], time);
    ssb.x += shift * planet.x;
    ssb.y += shift * planet.y;
    ssb.z += shift * planet.z;
}
function CalcSolarSystemBarycenter(time) {
    const ssb = new Vector(0.0, 0.0, 0.0, time);
    AdjustBarycenter(ssb, time, Body.Jupiter, JUPITER_GM);
    AdjustBarycenter(ssb, time, Body.Saturn, SATURN_GM);
    AdjustBarycenter(ssb, time, Body.Uranus, URANUS_GM);
    AdjustBarycenter(ssb, time, Body.Neptune, NEPTUNE_GM);
    return ssb;
}
// Pluto integrator begins ----------------------------------------------------
const PLUTO_NUM_STATES = 51;
const PLUTO_TIME_STEP = 29200;
const PLUTO_DT = 146;
const PLUTO_NSTEPS = 201;
const PlutoStateTable = [
    [-73e4, [-26.118207232108, -14.376168177825, 3.384402515299], [1.6339372163656e-03, -0.0027861699588508, -0.0013585880229445]],
    [-700800, [41.974905202127, -0.448502952929, -12.770351505989], [7.3458569351457e-04, 2.2785014891658e-03, 4.8619778602049e-04]],
    [-671600, [14.706930780744, 44.269110540027, 9.353698474772], [-0.00210001479998, 2.2295915939915e-04, 7.0143443551414e-04]],
    [-642400, [-29.441003929957, -6.43016153057, 6.858481011305], [8.4495803960544e-04, -0.0030783914758711, -0.0012106305981192]],
    [-613200, [39.444396946234, -6.557989760571, -13.913760296463], [1.1480029005873e-03, 2.2400006880665e-03, 3.5168075922288e-04]],
    [-584e3, [20.230380950700, 43.266966657189, 7.382966091923], [-0.0019754081700585, 5.3457141292226e-04, 7.5929169129793e-04]],
    [-554800, [-30.65832536462, 2.093818874552, 9.880531138071], [6.1010603013347e-05, -0.0031326500935382, -99346125151067e-17]],
    [-525600, [35.737703251673, -12.587706024764, -14.677847247563], [1.5802939375649e-03, 2.1347678412429e-03, 1.9074436384343e-04]],
    [-496400, [25.466295188546, 41.367478338417, 5.216476873382], [-0.0018054401046468, 8.3283083599510e-04, 8.0260156912107e-04]],
    [-467200, [-29.847174904071, 10.636426313081, 12.297904180106], [-63257063052907e-17, -0.0029969577578221, -74476074151596e-17]],
    [-438e3, [30.774692107687, -18.236637015304, -14.945535879896], [2.0113162005465e-03, 1.9353827024189e-03, -20937793168297e-19]],
    [-408800, [30.243153324028, 38.656267888503, 2.938501750218], [-0.0016052508674468, 1.1183495337525e-03, 8.3333973416824e-04]],
    [-379600, [-27.288984772533, 18.643162147874, 14.023633623329], [-0.0011856388898191, -0.0027170609282181, -49015526126399e-17]],
    [-350400, [24.519605196774, -23.245756064727, -14.626862367368], [2.4322321483154e-03, 1.6062008146048e-03, -23369181613312e-17]],
    [-321200, [34.505274805875, 35.125338586954, 0.557361475637], [-0.0013824391637782, 1.3833397561817e-03, 8.4823598806262e-04]],
    [-292e3, [-23.275363915119, 25.818514298769, 15.055381588598], [-0.0016062295460975, -0.0023395961498533, -24377362639479e-17]],
    [-262800, [17.050384798092, -27.180376290126, -13.608963321694], [2.8175521080578e-03, 1.1358749093955e-03, -49548725258825e-17]],
    [-233600, [38.093671910285, 30.880588383337, -1.843688067413], [-0.0011317697153459, 1.6128814698472e-03, 8.4177586176055e-04]],
    [-204400, [-18.197852930878, 31.932869934309, 15.438294826279], [-0.0019117272501813, -0.0019146495909842, -19657304369835e-18]],
    [-175200, [8.528924039997, -29.618422200048, -11.805400994258], [3.1034370787005e-03, 5.1393633292430e-04, -77293066202546e-17]],
    [-146e3, [40.946857258640, 25.904973592021, -4.256336240499], [-83652705194051e-17, 1.8129497136404e-03, 8.1564228273060e-04]],
    [-116800, [-12.326958895325, 36.881883446292, 15.217158258711], [-0.0021166103705038, -0.001481442003599, 1.7401209844705e-04]],
    [-87600, [-0.633258375909, -30.018759794709, -9.17193287495], [3.2016994581737e-03, -25279858672148e-17, -0.0010411088271861]],
    [-58400, [42.936048423883, 20.344685584452, -6.588027007912], [-50525450073192e-17, 1.9910074335507e-03, 7.7440196540269e-04]],
    [-29200, [-5.975910552974, 40.611809958460, 14.470131723673], [-0.0022184202156107, -0.0010562361130164, 3.3652250216211e-04]],
    [0.0, [-9.875369580774, -27.978926224737, -5.753711824704], [3.0287533248818e-03, -0.0011276087003636, -0.0012651326732361]],
    [29200.0, [43.958831986165, 14.214147973292, -8.808306227163], [-14717608981871e-17, 2.1404187242141e-03, 7.1486567806614e-04]],
    [58400.0, [0.678136763520, 43.094461639362, 13.243238780721], [-0.0022358226110718, -63233636090933e-17, 4.7664798895648e-04]],
    [87600.0, [-18.282602096834, -23.30503958666, -1.766620508028], [2.5567245263557e-03, -0.0019902940754171, -0.0013943491701082]],
    [116800.0, [43.873338744526, 7.700705617215, -10.814273666425], [2.3174803055677e-04, 2.2402163127924e-03, 6.2988756452032e-04]],
    [146000.0, [7.392949027906, 44.382678951534, 11.629500214854], [-0.002193281545383, -21751799585364e-17, 5.9556516201114e-04]],
    [175200.0, [-24.981690229261, -16.204012851426, 2.466457544298], [1.8193989149580e-03, -0.0026765419531201, -0.0013848283502247]],
    [204400.0, [42.530187039511, 0.845935508021, -12.554907527683], [6.5059779150669e-04, 2.2725657282262e-03, 5.1133743202822e-04]],
    [233600.0, [13.999526486822, 44.462363044894, 9.669418486465], [-0.0021079296569252, 1.7533423831993e-04, 6.9128485798076e-04]],
    [262800.0, [-29.184024803031, -7.371243995762, 6.493275957928], [9.3581363109681e-04, -0.0030610357109184, -0.0012364201089345]],
    [292000.0, [39.831980671753, -6.078405766765, -13.909815358656], [1.1117769689167e-03, 2.2362097830152e-03, 3.6230548231153e-04]],
    [321200.0, [20.294955108476, 43.417190420251, 7.450091985932], [-0.0019742157451535, 5.3102050468554e-04, 7.5938408813008e-04]],
    [350400.0, [-30.66999230216, 2.318743558955, 9.973480913858], [4.5605107450676e-05, -0.0031308219926928, -99066533301924e-17]],
    [379600.0, [35.626122155983, -12.897647509224, -14.777586508444], [1.6015684949743e-03, 2.1171931182284e-03, 1.8002516202204e-04]],
    [408800.0, [26.133186148561, 41.232139187599, 5.006401326220], [-0.0017857704419579, 8.6046232702817e-04, 8.0614690298954e-04]],
    [438000.0, [-29.57674022923, 11.863535943587, 12.631323039872], [-72292830060955e-17, -0.0029587820140709, -708242964503e-15]],
    [467200.0, [29.910805787391, -19.159019294, -15.013363865194], [2.0871080437997e-03, 1.8848372554514e-03, -38528655083926e-18]],
    [496400.0, [31.375957451819, 38.050372720763, 2.433138343754], [-0.0015546055556611, 1.1699815465629e-03, 8.3565439266001e-04]],
    [525600.0, [-26.360071336928, 20.662505904952, 14.414696258958], [-0.0013142373118349, -0.0026236647854842, -42542017598193e-17]],
    [554800.0, [22.599441488648, -24.508879898306, -14.484045731468], [2.5454108304806e-03, 1.4917058755191e-03, -30243665086079e-17]],
    [584000.0, [35.877864013014, 33.894226366071, -0.224524636277], [-0.0012941245730845, 1.4560427668319e-03, 8.4762160640137e-04]],
    [613200.0, [-21.538149762417, 28.204068269761, 15.321973799534], [-0.001731211740901, -0.0021939631314577, -1631691327518e-16]],
    [642400.0, [13.971521374415, -28.339941764789, -13.083792871886], [2.9334630526035e-03, 9.1860931752944e-04, -59939422488627e-17]],
    [671600.0, [39.526942044143, 28.939897360110, -2.872799527539], [-0.0010068481658095, 1.7021132888090e-03, 8.3578230511981e-04]],
    [700800.0, [-15.576200701394, 34.399412961275, 15.466033737854], [-0.0020098814612884, -0.0017191109825989, 7.0414782780416e-05]],
    [730000.0, [4.243252837090, -30.118201690825, -10.707441231349], [3.1725847067411e-03, 1.6098461202270e-04, -90672150593868e-17]]
];
class TerseVector {
    constructor(x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }
    clone() {
        return new TerseVector(this.x, this.y, this.z);
    }
    ToAstroVector(t) {
        return new Vector(this.x, this.y, this.z, t);
    }
    static zero() {
        return new TerseVector(0, 0, 0);
    }
    quadrature() {
        return this.x * this.x + this.y * this.y + this.z * this.z;
    }
    add(other) {
        return new TerseVector(this.x + other.x, this.y + other.y, this.z + other.z);
    }
    sub(other) {
        return new TerseVector(this.x - other.x, this.y - other.y, this.z - other.z);
    }
    incr(other) {
        this.x += other.x;
        this.y += other.y;
        this.z += other.z;
    }
    decr(other) {
        this.x -= other.x;
        this.y -= other.y;
        this.z -= other.z;
    }
    mul(scalar) {
        return new TerseVector(scalar * this.x, scalar * this.y, scalar * this.z);
    }
    div(scalar) {
        return new TerseVector(this.x / scalar, this.y / scalar, this.z / scalar);
    }
    mean(other) {
        return new TerseVector((this.x + other.x) / 2, (this.y + other.y) / 2, (this.z + other.z) / 2);
    }
    neg() {
        return new TerseVector(-this.x, -this.y, -this.z);
    }
}
class body_state_t {
    constructor(tt, r, v) {
        this.tt = tt;
        this.r = r;
        this.v = v;
    }
    clone() {
        return new body_state_t(this.tt, this.r, this.v);
    }
    sub(other) {
        return new body_state_t(this.tt, this.r.sub(other.r), this.v.sub(other.v));
    }
}
function BodyStateFromTable(entry) {
    let [tt, [rx, ry, rz], [vx, vy, vz]] = entry;
    return new body_state_t(tt, new TerseVector(rx, ry, rz), new TerseVector(vx, vy, vz));
}
function AdjustBarycenterPosVel(ssb, tt, body, planet_gm) {
    const shift = planet_gm / (planet_gm + SUN_GM);
    const planet = CalcVsopPosVel(vsop[body], tt);
    ssb.r.incr(planet.r.mul(shift));
    ssb.v.incr(planet.v.mul(shift));
    return planet;
}
function AccelerationIncrement(small_pos, gm, major_pos) {
    const delta = major_pos.sub(small_pos);
    const r2 = delta.quadrature();
    return delta.mul(gm / (r2 * Math.sqrt(r2)));
}
class major_bodies_t {
    constructor(tt) {
        // Accumulate the Solar System Barycenter position.
        let ssb = new body_state_t(tt, new TerseVector(0, 0, 0), new TerseVector(0, 0, 0));
        this.Jupiter = AdjustBarycenterPosVel(ssb, tt, Body.Jupiter, JUPITER_GM);
        this.Saturn = AdjustBarycenterPosVel(ssb, tt, Body.Saturn, SATURN_GM);
        this.Uranus = AdjustBarycenterPosVel(ssb, tt, Body.Uranus, URANUS_GM);
        this.Neptune = AdjustBarycenterPosVel(ssb, tt, Body.Neptune, NEPTUNE_GM);
        // Convert planets' [pos, vel] vectors from heliocentric to barycentric.
        this.Jupiter.r.decr(ssb.r);
        this.Jupiter.v.decr(ssb.v);
        this.Saturn.r.decr(ssb.r);
        this.Saturn.v.decr(ssb.v);
        this.Uranus.r.decr(ssb.r);
        this.Uranus.v.decr(ssb.v);
        this.Neptune.r.decr(ssb.r);
        this.Neptune.v.decr(ssb.v);
        // Convert heliocentric SSB to barycentric Sun.
        this.Sun = new body_state_t(tt, ssb.r.mul(-1), ssb.v.mul(-1));
    }
    Acceleration(pos) {
        // Use barycentric coordinates of the Sun and major planets to calculate
        // the gravitational acceleration vector experienced at location 'pos'.
        let acc = AccelerationIncrement(pos, SUN_GM, this.Sun.r);
        acc.incr(AccelerationIncrement(pos, JUPITER_GM, this.Jupiter.r));
        acc.incr(AccelerationIncrement(pos, SATURN_GM, this.Saturn.r));
        acc.incr(AccelerationIncrement(pos, URANUS_GM, this.Uranus.r));
        acc.incr(AccelerationIncrement(pos, NEPTUNE_GM, this.Neptune.r));
        return acc;
    }
}
/**
 * @ignore
 *
 * @brief The state of a body at an incremental step in a gravity simulation.
 *
 * This is an internal data structure used to represent the
 * position, velocity, and acceleration vectors of a body
 * in a gravity simulation at a given moment in time.
 *
 * @property tt
 *      The J2000 terrestrial time of the state [days].
 *
 * @property r
 *      The position vector [au].
 *
 * @property v
 *      The velocity vector [au/day].
 *
 * @property a
 *      The acceleration vector [au/day^2].
 */
class body_grav_calc_t {
    constructor(tt, r, v, a) {
        this.tt = tt;
        this.r = r;
        this.v = v;
        this.a = a;
    }
    clone() {
        return new body_grav_calc_t(this.tt, this.r.clone(), this.v.clone(), this.a.clone());
    }
}
class grav_sim_t {
    constructor(bary, grav) {
        this.bary = bary;
        this.grav = grav;
    }
}
function UpdatePosition(dt, r, v, a) {
    return new TerseVector(r.x + dt * (v.x + dt * a.x / 2), r.y + dt * (v.y + dt * a.y / 2), r.z + dt * (v.z + dt * a.z / 2));
}
function UpdateVelocity(dt, v, a) {
    return new TerseVector(v.x + dt * a.x, v.y + dt * a.y, v.z + dt * a.z);
}
function GravSim(tt2, calc1) {
    const dt = tt2 - calc1.tt;
    // Calculate where the major bodies (Sun, Jupiter...Neptune) will be at tt2.
    const bary2 = new major_bodies_t(tt2);
    // Estimate position of small body as if current acceleration applies across the whole time interval.
    const approx_pos = UpdatePosition(dt, calc1.r, calc1.v, calc1.a);
    // Calculate the average acceleration of the endpoints.
    // This becomes our estimate of the mean effective acceleration over the whole interval.
    const mean_acc = bary2.Acceleration(approx_pos).mean(calc1.a);
    // Refine the estimates of [pos, vel, acc] at tt2 using the mean acceleration.
    const pos = UpdatePosition(dt, calc1.r, calc1.v, mean_acc);
    const vel = calc1.v.add(mean_acc.mul(dt));
    const acc = bary2.Acceleration(pos);
    const grav = new body_grav_calc_t(tt2, pos, vel, acc);
    return new grav_sim_t(bary2, grav);
}
const pluto_cache = [];
function ClampIndex(frac, nsteps) {
    const index = Math.floor(frac);
    if (index < 0)
        return 0;
    if (index >= nsteps)
        return nsteps - 1;
    return index;
}
function GravFromState(entry) {
    const state = BodyStateFromTable(entry);
    const bary = new major_bodies_t(state.tt);
    const r = state.r.add(bary.Sun.r);
    const v = state.v.add(bary.Sun.v);
    const a = bary.Acceleration(r);
    const grav = new body_grav_calc_t(state.tt, r, v, a);
    return new grav_sim_t(bary, grav);
}
function GetSegment(cache, tt) {
    const t0 = PlutoStateTable[0][0];
    if (tt < t0 || tt > PlutoStateTable[PLUTO_NUM_STATES - 1][0]) {
        // Don't bother calculating a segment. Let the caller crawl backward/forward to this time.
        return null;
    }
    const seg_index = ClampIndex((tt - t0) / PLUTO_TIME_STEP, PLUTO_NUM_STATES - 1);
    if (!cache[seg_index]) {
        const seg = cache[seg_index] = [];
        // Each endpoint is exact.
        seg[0] = GravFromState(PlutoStateTable[seg_index]).grav;
        seg[PLUTO_NSTEPS - 1] = GravFromState(PlutoStateTable[seg_index + 1]).grav;
        // Simulate forwards from the lower time bound.
        let i;
        let step_tt = seg[0].tt;
        for (i = 1; i < PLUTO_NSTEPS - 1; ++i)
            seg[i] = GravSim(step_tt += PLUTO_DT, seg[i - 1]).grav;
        // Simulate backwards from the upper time bound.
        step_tt = seg[PLUTO_NSTEPS - 1].tt;
        var reverse = [];
        reverse[PLUTO_NSTEPS - 1] = seg[PLUTO_NSTEPS - 1];
        for (i = PLUTO_NSTEPS - 2; i > 0; --i)
            reverse[i] = GravSim(step_tt -= PLUTO_DT, reverse[i + 1]).grav;
        // Fade-mix the two series so that there are no discontinuities.
        for (i = PLUTO_NSTEPS - 2; i > 0; --i) {
            const ramp = i / (PLUTO_NSTEPS - 1);
            seg[i].r = seg[i].r.mul(1 - ramp).add(reverse[i].r.mul(ramp));
            seg[i].v = seg[i].v.mul(1 - ramp).add(reverse[i].v.mul(ramp));
            seg[i].a = seg[i].a.mul(1 - ramp).add(reverse[i].a.mul(ramp));
        }
    }
    return cache[seg_index];
}
function CalcPlutoOneWay(entry, target_tt, dt) {
    let sim = GravFromState(entry);
    const n = Math.ceil((target_tt - sim.grav.tt) / dt);
    for (let i = 0; i < n; ++i)
        sim = GravSim((i + 1 === n) ? target_tt : (sim.grav.tt + dt), sim.grav);
    return sim;
}
function CalcPluto(time, helio) {
    let r, v, bary;
    const seg = GetSegment(pluto_cache, time.tt);
    if (!seg) {
        // The target time is outside the year range 0000..4000.
        // Calculate it by crawling backward from 0000 or forward from 4000.
        // FIXFIXFIX - This is super slow. Could optimize this with extra caching if needed.
        let sim;
        if (time.tt < PlutoStateTable[0][0])
            sim = CalcPlutoOneWay(PlutoStateTable[0], time.tt, -146);
        else
            sim = CalcPlutoOneWay(PlutoStateTable[PLUTO_NUM_STATES - 1], time.tt, 146);
        r = sim.grav.r;
        v = sim.grav.v;
        bary = sim.bary;
    }
    else {
        const left = ClampIndex((time.tt - seg[0].tt) / PLUTO_DT, PLUTO_NSTEPS - 1);
        const s1 = seg[left];
        const s2 = seg[left + 1];
        // Find mean acceleration vector over the interval.
        const acc = s1.a.mean(s2.a);
        // Use Newtonian mechanics to extrapolate away from t1 in the positive time direction.
        const ra = UpdatePosition(time.tt - s1.tt, s1.r, s1.v, acc);
        const va = UpdateVelocity(time.tt - s1.tt, s1.v, acc);
        // Use Newtonian mechanics to extrapolate away from t2 in the negative time direction.
        const rb = UpdatePosition(time.tt - s2.tt, s2.r, s2.v, acc);
        const vb = UpdateVelocity(time.tt - s2.tt, s2.v, acc);
        // Use fade in/out idea to blend the two position estimates.
        const ramp = (time.tt - s1.tt) / PLUTO_DT;
        r = ra.mul(1 - ramp).add(rb.mul(ramp));
        v = va.mul(1 - ramp).add(vb.mul(ramp));
    }
    {
        // Convert barycentric vectors to heliocentric vectors.
        if (!bary)
            bary = new major_bodies_t(time.tt);
        r = r.sub(bary.Sun.r);
        v = v.sub(bary.Sun.v);
    }
    return new StateVector(r.x, r.y, r.z, v.x, v.y, v.z, time);
}
// Jupiter Moons ends --------------------------------------------------------
/**
 * @brief Calculates a vector from the center of the Sun to the given body at the given time.
 *
 * Calculates heliocentric (i.e., with respect to the center of the Sun)
 * Cartesian coordinates in the J2000 equatorial system of a celestial
 * body at a specified time. The position is not corrected for light travel time or aberration.
 *
 * @param {Body} body
 *      One of the following values:
 *      `Body.Sun`, `Body.Moon`, `Body.Mercury`, `Body.Venus`,
 *      `Body.Earth`, `Body.Mars`, `Body.Jupiter`, `Body.Saturn`,
 *      `Body.Uranus`, `Body.Neptune`, `Body.Pluto`,
 *      `Body.SSB`, or `Body.EMB`.
 *      Also allowed to be a user-defined star created by {@link DefineStar}.
 *
 * @param {FlexibleDateTime} date
 *      The date and time for which the body's position is to be calculated.
 *
 * @returns {Vector}
 */
function HelioVector(body, date) {
    var time = MakeTime(date);
    if (body in vsop)
        return CalcVsop(vsop[body], time);
    if (body === Body.Pluto) {
        const p = CalcPluto(time);
        return new Vector(p.x, p.y, p.z, time);
    }
    if (body === Body.Sun)
        return new Vector(0, 0, 0, time);
    if (body === Body.Moon) {
        var e = CalcVsop(vsop.Earth, time);
        var m = GeoMoon(time);
        return new Vector(e.x + m.x, e.y + m.y, e.z + m.z, time);
    }
    if (body === Body.EMB) {
        const e = CalcVsop(vsop.Earth, time);
        const m = GeoMoon(time);
        const denom = 1.0 + EARTH_MOON_MASS_RATIO;
        return new Vector(e.x + (m.x / denom), e.y + (m.y / denom), e.z + (m.z / denom), time);
    }
    if (body === Body.SSB)
        return CalcSolarSystemBarycenter(time);
    const star = UserDefinedStar(body);
    if (star) {
        const sphere = new Spherical(star.dec, 15 * star.ra, star.dist);
        return VectorFromSphere(sphere, time);
    }
    throw `HelioVector: Unknown body "${body}"`;
}
/**
 * Solve for light travel time of a vector function.
 *
 * When observing a distant object, for example Jupiter as seen from Earth,
 * the amount of time it takes for light to travel from the object to the
 * observer can significantly affect the object's apparent position.
 * This function is a generic solver that figures out how long in the
 * past light must have left the observed object to reach the observer
 * at the specified observation time. It requires passing in `func`
 * to express an arbitrary position vector as a function of time.
 *
 * `CorrectLightTravel` repeatedly calls `func`, passing a series of time
 * estimates in the past. Then `func` must return a relative position vector between
 * the observer and the target. `CorrectLightTravel` keeps calling
 * `func` with more and more refined estimates of the time light must have
 * left the target to arrive at the observer.
 *
 * For common use cases, it is simpler to use {@link BackdatePosition}
 * for calculating the light travel time correction of one body observing another body.
 *
 * For geocentric calculations, {@link GeoVector} also backdates the returned
 * position vector for light travel time, only it returns the observation time in
 * the returned vector's `t` field rather than the backdated time.
 *
 * @param {function(AstroTime): number} func
 *      An arbitrary position vector as a function of time:
 *      function({@link AstroTime}) =&gt; {@link Vector}.
 *
 * @param {AstroTime} time
 *      The observation time for which to solve for light travel delay.
 *
 * @returns {AstroVector}
 *      The position vector at the solved backdated time.
 *      The `t` field holds the time that light left the observed
 *      body to arrive at the observer at the observation time.
 */
function CorrectLightTravel(func, time) {
    let ltime = time;
    let dt = 0;
    for (let iter = 0; iter < 10; ++iter) {
        const pos = func(ltime);
        const lt = pos.Length() / C_AUDAY;
        // This solver does not support more than one light-day of distance,
        // because that would cause convergence problems and inaccurate
        // values for stellar aberration angles.
        if (lt > 1.0)
            throw `Object is too distant for light-travel solver.`;
        const ltime2 = time.AddDays(-lt);
        dt = Math.abs(ltime2.tt - ltime.tt);
        if (dt < 1.0e-9) // 86.4 microseconds
            return pos;
        ltime = ltime2;
    }
    throw `Light-travel time solver did not converge: dt = ${dt}`;
}
class BodyPosition {
    constructor(observerBody, targetBody, aberration, observerPos) {
        this.observerBody = observerBody;
        this.targetBody = targetBody;
        this.aberration = aberration;
        this.observerPos = observerPos;
    }
    Position(time) {
        if (this.aberration) {
            // The following discussion is worded with the observer body being the Earth,
            // which is often the case. However, the same reasoning applies to any observer body
            // without loss of generality.
            //
            // To include aberration, make a good first-order approximation
            // by backdating the Earth's position also.
            // This is confusing, but it works for objects within the Solar System
            // because the distance the Earth moves in that small amount of light
            // travel time (a few minutes to a few hours) is well approximated
            // by a line segment that substends the angle seen from the remote
            // body viewing Earth. That angle is pretty close to the aberration
            // angle of the moving Earth viewing the remote body.
            // In other words, both of the following approximate the aberration angle:
            //     (transverse distance Earth moves) / (distance to body)
            //     (transverse speed of Earth) / (speed of light).
            this.observerPos = HelioVector(this.observerBody, time);
        }
        const targetPos = HelioVector(this.targetBody, time);
        return new Vector(targetPos.x - this.observerPos.x, targetPos.y - this.observerPos.y, targetPos.z - this.observerPos.z, time);
    }
}
/**
 * @brief Solve for light travel time correction of apparent position.
 *
 * When observing a distant object, for example Jupiter as seen from Earth,
 * the amount of time it takes for light to travel from the object to the
 * observer can significantly affect the object's apparent position.
 *
 * This function solves the light travel time correction for the apparent
 * relative position vector of a target body as seen by an observer body
 * at a given observation time.
 *
 * For geocentric calculations, {@link GeoVector} also includes light
 * travel time correction, but the time `t` embedded in its returned vector
 * refers to the observation time, not the backdated time that light left
 * the observed body. Thus `BackdatePosition` provides direct
 * access to the light departure time for callers that need it.
 *
 * For a more generalized light travel correction solver, see {@link CorrectLightTravel}.
 *
 * @param {FlexibleDateTime} date
 *      The time of observation.
 *
 * @param {Body} observerBody
 *      The body to be used as the observation location.
 *
 * @param {Body} targetBody
 *      The body to be observed.
 *
 * @param {boolean} aberration
 *      `true` to correct for aberration, or `false` to leave uncorrected.
 *
 * @returns {Vector}
 *      The position vector at the solved backdated time.
 *      The `t` field holds the time that light left the observed
 *      body to arrive at the observer at the observation time.
 */
function BackdatePosition(date, observerBody, targetBody, aberration) {
    const time = MakeTime(date);
    if (UserDefinedStar(targetBody)) {
        // This is a user-defined star, which must be treated as a special case.
        // First, we assume its heliocentric position does not change with time.
        // Second, we assume its heliocentric position has already been corrected
        // for light-travel time, its coordinates given as it appears on Earth at the present.
        // Therefore, no backdating is applied.
        const tvec = HelioVector(targetBody, time);
        // No correction is needed. Simply return the star's current position as seen from the observer.
        const ovec = HelioVector(observerBody, time);
        return new Vector(tvec.x - ovec.x, tvec.y - ovec.y, tvec.z - ovec.z, time);
    }
    let observerPos;
    {
        observerPos = HelioVector(observerBody, time);
    }
    const bpos = new BodyPosition(observerBody, targetBody, aberration, observerPos);
    return CorrectLightTravel(t => bpos.Position(t), time);
}
/**
 * @brief Calculates a vector from the center of the Earth to the given body at the given time.
 *
 * Calculates geocentric (i.e., with respect to the center of the Earth)
 * Cartesian coordinates in the J2000 equatorial system of a celestial
 * body at a specified time. The position is always corrected for light travel time:
 * this means the position of the body is "back-dated" based on how long it
 * takes light to travel from the body to an observer on the Earth.
 * Also, the position can optionally be corrected for aberration, an effect
 * causing the apparent direction of the body to be shifted based on
 * transverse movement of the Earth with respect to the rays of light
 * coming from that body.
 *
 * @param {Body} body
 *      One of the following values:
 *      `Body.Sun`, `Body.Moon`, `Body.Mercury`, `Body.Venus`,
 *      `Body.Earth`, `Body.Mars`, `Body.Jupiter`, `Body.Saturn`,
 *      `Body.Uranus`, `Body.Neptune`, or `Body.Pluto`.
 *      Also allowed to be a user-defined star created with {@link DefineStar}.
 *
 * @param {FlexibleDateTime} date
 *      The date and time for which the body's position is to be calculated.
 *
 * @param {boolean} aberration
 *      Pass `true` to correct for
 *      <a href="https://en.wikipedia.org/wiki/Aberration_of_light">aberration</a>,
 *      or `false` to leave uncorrected.
 *
 * @returns {Vector}
 */
function GeoVector(body, date, aberration) {
    const time = MakeTime(date);
    switch (body) {
        case Body.Earth:
            return new Vector(0, 0, 0, time);
        case Body.Moon:
            return GeoMoon(time);
        default:
            const vec = BackdatePosition(time, Body.Earth, body, aberration);
            vec.t = time; // tricky: return the observation time, not the backdated time
            return vec;
    }
}
function QuadInterp(tm, dt, fa, fm, fb) {
    let Q = (fb + fa) / 2 - fm;
    let R = (fb - fa) / 2;
    let S = fm;
    let x;
    if (Q == 0) {
        // This is a line, not a parabola.
        if (R == 0) {
            // This is a HORIZONTAL line... can't make progress!
            return null;
        }
        x = -S / R;
        if (x < -1 || x > 1)
            return null; // out of bounds
    }
    else {
        // It really is a parabola. Find roots x1, x2.
        let u = R * R - 4 * Q * S;
        if (u <= 0)
            return null;
        let ru = Math.sqrt(u);
        let x1 = (-R + ru) / (2 * Q);
        let x2 = (-R - ru) / (2 * Q);
        if (-1 <= x1 && x1 <= 1) {
            if (-1 <= x2 && x2 <= 1)
                return null;
            x = x1;
        }
        else if (-1 <= x2 && x2 <= 1) {
            x = x2;
        }
        else {
            return null;
        }
    }
    let t = tm + x * dt;
    let df_dt = (2 * Q * x + R) / dt;
    return { t: t, df_dt: df_dt };
}
/**
 * @brief Options for the {@link Search} function.
 *
 * @typedef {object} SearchOptions
 *
 * @property {number | undefined} dt_tolerance_seconds
 *      The number of seconds for a time window smaller than which the search
 *      is considered successful.  Using too large a tolerance can result in
 *      an inaccurate time estimate.  Using too small a tolerance can cause
 *      excessive computation, or can even cause the search to fail because of
 *      limited floating-point resolution.  Defaults to 1 second.
 *
 * @property {number | undefined} init_f1
 *      As an optimization, if the caller of {@link Search}
 *      has already calculated the value of the function being searched (the parameter `func`)
 *      at the time coordinate `t1`, it can pass in that value as `init_f1`.
 *      For very expensive calculations, this can measurably improve performance.
 *
 * @property {number | undefined} init_f2
 *      The same as `init_f1`, except this is the optional initial value of `func(t2)`
 *      instead of `func(t1)`.
 *
 * @property {number | undefined} iter_limit
 */
/**
 * @brief Finds the time when a function ascends through zero.
 *
 * Search for next time <i>t</i> (such that <i>t</i> is between `t1` and `t2`)
 * that `func(t)` crosses from a negative value to a non-negative value.
 * The given function must have "smooth" behavior over the entire inclusive range [`t1`, `t2`],
 * meaning that it behaves like a continuous differentiable function.
 * It is not required that `t1` &lt; `t2`; `t1` &gt; `t2`
 * allows searching backward in time.
 * Note: `t1` and `t2` must be chosen such that there is no possibility
 * of more than one zero-crossing (ascending or descending), or it is possible
 * that the "wrong" event will be found (i.e. not the first event after t1)
 * or even that the function will return `null`, indicating that no event was found.
 *
 * @param {function(AstroTime): number} func
 *      The function to find an ascending zero crossing for.
 *      The function must accept a single parameter of type {@link AstroTime}
 *      and return a numeric value:
 *      function({@link AstroTime}) =&gt; `number`
 *
 * @param {AstroTime} t1
 *      The lower time bound of a search window.
 *
 * @param {AstroTime} t2
 *      The upper time bound of a search window.
 *
 * @param {SearchOptions | undefined} options
 *      Options that can tune the behavior of the search.
 *      Most callers can omit this argument.
 *
 * @returns {AstroTime | null}
 *      If the search is successful, returns the date and time of the solution.
 *      If the search fails, returns `null`.
 */
function Search(f, t1, t2, options) {
    const dt_tolerance_seconds = VerifyNumber((options && options.dt_tolerance_seconds) || 1);
    const dt_days = Math.abs(dt_tolerance_seconds / SECONDS_PER_DAY);
    let f1 = (options && options.init_f1) || f(t1);
    let f2 = (options && options.init_f2) || f(t2);
    let fmid = NaN;
    let iter = 0;
    let iter_limit = (options && options.iter_limit) || 20;
    let calc_fmid = true;
    while (true) {
        if (++iter > iter_limit)
            throw `Excessive iteration in Search()`;
        let tmid = InterpolateTime(t1, t2, 0.5);
        let dt = tmid.ut - t1.ut;
        if (Math.abs(dt) < dt_days) {
            // We are close enough to the event to stop the search.
            return tmid;
        }
        if (calc_fmid)
            fmid = f(tmid);
        else
            calc_fmid = true; // we already have the correct value of fmid from the previous loop
        // Quadratic interpolation:
        // Try to find a parabola that passes through the 3 points we have sampled:
        // (t1,f1), (tmid,fmid), (t2,f2).
        let q = QuadInterp(tmid.ut, t2.ut - tmid.ut, f1, fmid, f2);
        // Did we find an approximate root-crossing?
        if (q) {
            // Evaluate the function at our candidate solution.
            let tq = MakeTime(q.t);
            let fq = f(tq);
            if (q.df_dt !== 0) {
                if (Math.abs(fq / q.df_dt) < dt_days) {
                    // The estimated time error is small enough that we can quit now.
                    return tq;
                }
                // Try guessing a tighter boundary with the interpolated root at the center.
                let dt_guess = 1.2 * Math.abs(fq / q.df_dt);
                if (dt_guess < dt / 10) {
                    let tleft = tq.AddDays(-dt_guess);
                    let tright = tq.AddDays(+dt_guess);
                    if ((tleft.ut - t1.ut) * (tleft.ut - t2.ut) < 0) {
                        if ((tright.ut - t1.ut) * (tright.ut - t2.ut) < 0) {
                            let fleft = f(tleft);
                            let fright = f(tright);
                            if (fleft < 0 && fright >= 0) {
                                f1 = fleft;
                                f2 = fright;
                                t1 = tleft;
                                t2 = tright;
                                fmid = fq;
                                calc_fmid = false;
                                continue;
                            }
                        }
                    }
                }
            }
        }
        if (f1 < 0 && fmid >= 0) {
            t2 = tmid;
            f2 = fmid;
            continue;
        }
        if (fmid < 0 && f2 >= 0) {
            t1 = tmid;
            f1 = fmid;
            continue;
        }
        // Either there is no ascending zero-crossing in this range
        // or the search window is too wide.
        return null;
    }
}
function LongitudeOffset(diff) {
    let offset = diff;
    while (offset <= -180)
        offset += 360;
    while (offset > 180)
        offset -= 360;
    return offset;
}
function NormalizeLongitude(lon) {
    while (lon < 0)
        lon += 360;
    while (lon >= 360)
        lon -= 360;
    return lon;
}
/**
 * @brief Searches for when the Sun reaches a given ecliptic longitude.
 *
 * Searches for the moment in time when the center of the Sun reaches a given apparent
 * ecliptic longitude, as seen from the center of the Earth, within a given range of dates.
 * This function can be used to determine equinoxes and solstices.
 * However, it is usually more convenient and efficient to call {@link Seasons}
 * to calculate equinoxes and solstices for a given calendar year.
 * `SearchSunLongitude` is more general in that it allows searching for arbitrary longitude values.
 *
 * @param {number} targetLon
 *      The desired ecliptic longitude of date in degrees.
 *      This may be any value in the range [0, 360), although certain
 *      values have conventional meanings:
 *
 *      When `targetLon` is 0, finds the March equinox,
 *      which is the moment spring begins in the northern hemisphere
 *      and the beginning of autumn in the southern hemisphere.
 *
 *      When `targetLon` is 180, finds the September equinox,
 *      which is the moment autumn begins in the northern hemisphere and
 *      spring begins in the southern hemisphere.
 *
 *      When `targetLon` is 90, finds the northern solstice, which is the
 *      moment summer begins in the northern hemisphere and winter
 *      begins in the southern hemisphere.
 *
 *      When `targetLon` is 270, finds the southern solstice, which is the
 *      moment winter begins in the northern hemisphere and summer
 *      begins in the southern hemisphere.
 *
 * @param {FlexibleDateTime} dateStart
 *      A date and time known to be earlier than the desired longitude event.
 *
 * @param {number} limitDays
 *      A floating point number of days, which when added to `dateStart`,
 *      yields a date and time known to be after the desired longitude event.
 *
 * @returns {AstroTime | null}
 *      The date and time when the Sun reaches the apparent ecliptic longitude `targetLon`
 *      within the range of times specified by `dateStart` and `limitDays`.
 *      If the Sun does not reach the target longitude within the specified time range, or the
 *      time range is excessively wide, the return value is `null`.
 *      To avoid a `null` return value, the caller must pick a time window around
 *      the event that is within a few days but not so small that the event might fall outside the window.
 */
function SearchSunLongitude(targetLon, dateStart, limitDays) {
    function sun_offset(t) {
        let pos = SunPosition(t);
        return LongitudeOffset(pos.elon - targetLon);
    }
    VerifyNumber(targetLon);
    VerifyNumber(limitDays);
    let t1 = MakeTime(dateStart);
    let t2 = t1.AddDays(limitDays);
    return Search(sun_offset, t1, t2, { dt_tolerance_seconds: 0.01 });
}
/**
 * @brief Returns one body's ecliptic longitude with respect to another, as seen from the Earth.
 *
 * This function determines where one body appears around the ecliptic plane
 * (the plane of the Earth's orbit around the Sun) as seen from the Earth,
 * relative to the another body's apparent position.
 * The function returns an angle in the half-open range [0, 360) degrees.
 * The value is the ecliptic longitude of `body1` relative to the ecliptic
 * longitude of `body2`.
 *
 * The angle is 0 when the two bodies are at the same ecliptic longitude
 * as seen from the Earth. The angle increases in the prograde direction
 * (the direction that the planets orbit the Sun and the Moon orbits the Earth).
 *
 * When the angle is 180 degrees, it means the two bodies appear on opposite sides
 * of the sky for an Earthly observer.
 *
 * Neither `body1` nor `body2` is allowed to be `Body.Earth`.
 * If this happens, the function throws an exception.
 *
 * @param {Body} body1
 *      The first body, whose longitude is to be found relative to the second body.
 *
 * @param {Body} body2
 *      The second body, relative to which the longitude of the first body is to be found.
 *
 * @param {FlexibleDateTime} date
 *      The date and time of the observation.
 *
 * @returns {number}
 *      An angle in the range [0, 360), expressed in degrees.
 */
function PairLongitude(body1, body2, date) {
    if (body1 === Body.Earth || body2 === Body.Earth)
        throw 'The Earth does not have a longitude as seen from itself.';
    const time = MakeTime(date);
    const vector1 = GeoVector(body1, time, false);
    const eclip1 = Ecliptic(vector1);
    const vector2 = GeoVector(body2, time, false);
    const eclip2 = Ecliptic(vector2);
    return NormalizeLongitude(eclip1.elon - eclip2.elon);
}
/**
 * @brief Determines the moon's phase expressed as an ecliptic longitude.
 *
 * @param {FlexibleDateTime} date
 *      The date and time for which to calculate the moon's phase.
 *
 * @returns {number}
 *      A value in the range [0, 360) indicating the difference
 *      in ecliptic longitude between the center of the Sun and the
 *      center of the Moon, as seen from the center of the Earth.
 *      Certain longitude values have conventional meanings:
 *
 * * 0 = new moon
 * * 90 = first quarter
 * * 180 = full moon
 * * 270 = third quarter
 */
function MoonPhase(date) {
    return PairLongitude(Body.Moon, Body.Sun, date);
}
/**
 * @brief Searches for the date and time that the Moon reaches a specified phase.
 *
 * Lunar phases are defined in terms of geocentric ecliptic longitudes
 * with respect to the Sun.  When the Moon and the Sun have the same ecliptic
 * longitude, that is defined as a new moon. When the two ecliptic longitudes
 * are 180 degrees apart, that is defined as a full moon.
 * To enumerate quarter lunar phases, it is simpler to call
 * {@link SearchMoonQuarter} once, followed by repeatedly calling
 * {@link NextMoonQuarter}. `SearchMoonPhase` is only
 * necessary for finding other lunar phases than the usual quarter phases.
 *
 * @param {number} targetLon
 *      The difference in geocentric ecliptic longitude between the Sun and Moon
 *      that specifies the lunar phase being sought. This can be any value
 *      in the range [0, 360). Here are some helpful examples:
 *      0 = new moon,
 *      90 = first quarter,
 *      180 = full moon,
 *      270 = third quarter.
 *
 * @param {FlexibleDateTime} dateStart
 *      The beginning of the window of time in which to search.
 *
 * @param {number} limitDays
 *      The floating point number of days away from `dateStart`
 *      that limits the window of time in which to search.
 *      If the value is negative, the search is performed into the past from `startTime`.
 *      Otherwise, the search is performed into the future from `startTime`.
 *
 * @returns {AstroTime | null}
 *      If successful, returns the date and time the moon reaches the phase specified by `targetlon`.
 *      This function will return `null` if the phase does not occur within `limitDays` of `startTime`;
 *      that is, if the search window is too small.
 */
function SearchMoonPhase(targetLon, dateStart, limitDays) {
    function moon_offset(t) {
        let mlon = MoonPhase(t);
        return LongitudeOffset(mlon - targetLon);
    }
    VerifyNumber(targetLon);
    VerifyNumber(limitDays);
    // To avoid discontinuities in the moon_offset function causing problems,
    // we need to approximate when that function will next return 0.
    // We probe it with the start time and take advantage of the fact
    // that every lunar phase repeats roughly every 29.5 days.
    // There is a surprising uncertainty in the quarter timing,
    // due to the eccentricity of the moon's orbit.
    // I have seen more than 0.9 days away from the simple prediction.
    // To be safe, we take the predicted time of the event and search
    // +/-1.5 days around it (a 3.0-day wide window).
    // But we must return null if the final result goes beyond limitDays after dateStart.
    const uncertainty = 1.5;
    const ta = MakeTime(dateStart);
    let ya = moon_offset(ta);
    let est_dt, dt1, dt2;
    {
        // Search forward in time.
        if (ya > 0)
            ya -= 360;
        est_dt = -(MEAN_SYNODIC_MONTH * ya) / 360;
        dt1 = est_dt - uncertainty;
        if (dt1 > limitDays)
            return null; // not possible for moon phase to occur within the specified window
        dt2 = Math.min(limitDays, est_dt + uncertainty);
    }
    const t1 = ta.AddDays(dt1);
    const t2 = ta.AddDays(dt2);
    return Search(moon_offset, t1, t2, { dt_tolerance_seconds: 0.1 });
}
/**
 * @brief A quarter lunar phase, along with when it occurs.
 *
 * @property {number} quarter
 *      An integer as follows:
 *      0 = new moon,
 *      1 = first quarter,
 *      2 = full moon,
 *      3 = third quarter.
 *
 * @property {AstroTime} time
 *      The date and time of the quarter lunar phase.
 */
class MoonQuarter {
    constructor(quarter, time) {
        this.quarter = quarter;
        this.time = time;
    }
}
/**
 * @brief Finds the first quarter lunar phase after the specified date and time.
 *
 * The quarter lunar phases are: new moon, first quarter, full moon, and third quarter.
 * To enumerate quarter lunar phases, call `SearchMoonQuarter` once,
 * then pass its return value to {@link NextMoonQuarter} to find the next
 * `MoonQuarter`. Keep calling `NextMoonQuarter` in a loop,
 * passing the previous return value as the argument to the next call.
 *
 * @param {FlexibleDateTime} dateStart
 *      The date and time after which to find the first quarter lunar phase.
 *
 * @returns {MoonQuarter}
 */
function SearchMoonQuarter(dateStart) {
    // Determine what the next quarter phase will be.
    let phaseStart = MoonPhase(dateStart);
    let quarterStart = Math.floor(phaseStart / 90);
    let quarter = (quarterStart + 1) % 4;
    let time = SearchMoonPhase(90 * quarter, dateStart, 10);
    if (!time)
        throw 'Cannot find moon quarter';
    return new MoonQuarter(quarter, time);
}
/**
 * @brief Finds the next quarter lunar phase in a series.
 *
 * Given a {@link MoonQuarter} object, finds the next consecutive
 * quarter lunar phase. See remarks in {@link SearchMoonQuarter}
 * for explanation of usage.
 *
 * @param {MoonQuarter} mq
 *      The return value of a prior call to {@link MoonQuarter} or `NextMoonQuarter`.
 *
 * @returns {MoonQuarter}
 */
function NextMoonQuarter(mq) {
    // Skip 6 days past the previous found moon quarter to find the next one.
    // This is less than the minimum possible increment.
    // So far I have seen the interval well contained by the range (6.5, 8.3) days.
    let date = new Date(mq.time.date.getTime() + 6 * MILLIS_PER_DAY);
    return SearchMoonQuarter(date);
}
/**
 * @brief When the seasons change for a given calendar year.
 *
 * Represents the dates and times of the two solstices
 * and the two equinoxes in a given calendar year.
 * These four events define the changing of the seasons on the Earth.
 *
 * @property {AstroTime} mar_equinox
 *      The date and time of the March equinox in the given calendar year.
 *      This is the moment in March that the plane of the Earth's equator passes
 *      through the center of the Sun; thus the Sun's declination
 *      changes from a negative number to a positive number.
 *      The March equinox defines
 *      the beginning of spring in the northern hemisphere and
 *      the beginning of autumn in the southern hemisphere.
 *
 * @property {AstroTime} jun_solstice
 *      The date and time of the June solstice in the given calendar year.
 *      This is the moment in June that the Sun reaches its most positive
 *      declination value.
 *      At this moment the Earth's north pole is most tilted most toward the Sun.
 *      The June solstice defines
 *      the beginning of summer in the northern hemisphere and
 *      the beginning of winter in the southern hemisphere.
 *
 * @property {AstroTime} sep_equinox
 *      The date and time of the September equinox in the given calendar year.
 *      This is the moment in September that the plane of the Earth's equator passes
 *      through the center of the Sun; thus the Sun's declination
 *      changes from a positive number to a negative number.
 *      The September equinox defines
 *      the beginning of autumn in the northern hemisphere and
 *      the beginning of spring in the southern hemisphere.
 *
 * @property {AstroTime} dec_solstice
 *      The date and time of the December solstice in the given calendar year.
 *      This is the moment in December that the Sun reaches its most negative
 *      declination value.
 *      At this moment the Earth's south pole is tilted most toward the Sun.
 *      The December solstice defines
 *      the beginning of winter in the northern hemisphere and
 *      the beginning of summer in the southern hemisphere.
 */
class SeasonInfo {
    constructor(mar_equinox, jun_solstice, sep_equinox, dec_solstice) {
        this.mar_equinox = mar_equinox;
        this.jun_solstice = jun_solstice;
        this.sep_equinox = sep_equinox;
        this.dec_solstice = dec_solstice;
    }
}
/**
 * @brief Finds the equinoxes and solstices for a given calendar year.
 *
 * @param {number | AstroTime} year
 *      The integer value or `AstroTime` object that specifies
 *      the UTC calendar year for which to find equinoxes and solstices.
 *
 * @returns {SeasonInfo}
 */
function Seasons(year) {
    function find(targetLon, month, day) {
        let startDate = new Date(Date.UTC(year, month - 1, day));
        let time = SearchSunLongitude(targetLon, startDate, 20);
        if (!time)
            throw `Cannot find season change near ${startDate.toISOString()}`;
        return time;
    }
    if ((year instanceof Date) && Number.isFinite(year.getTime()))
        year = year.getUTCFullYear();
    if (!Number.isSafeInteger(year))
        throw `Cannot calculate seasons because year argument ${year} is neither a Date nor a safe integer.`;
    let mar_equinox = find(0, 3, 10);
    let jun_solstice = find(90, 6, 10);
    let sep_equinox = find(180, 9, 10);
    let dec_solstice = find(270, 12, 10);
    return new SeasonInfo(mar_equinox, jun_solstice, sep_equinox, dec_solstice);
}
/**
 * @brief The two kinds of apsis: pericenter (closest) and apocenter (farthest).
 *
 * `Pericenter`: The body is at its closest distance to the object it orbits.
 * `Apocenter`:  The body is at its farthest distance from the object it orbits.
 *
 * @enum {number}
 */
var ApsisKind;
(function (ApsisKind) {
    ApsisKind[ApsisKind["Pericenter"] = 0] = "Pericenter";
    ApsisKind[ApsisKind["Apocenter"] = 1] = "Apocenter";
})(ApsisKind || (ApsisKind = {}));
/**
 * @brief Converts spherical coordinates to Cartesian coordinates.
 *
 * Given spherical coordinates and a time at which they are valid,
 * returns a vector of Cartesian coordinates. The returned value
 * includes the time, as required by `AstroTime`.
 *
 * @param {Spherical} sphere
 *      Spherical coordinates to be converted.
 *
 * @param {FlexibleDateTime} time
 *      The time that should be included in the returned vector.
 *
 * @returns {Vector}
 *      The vector form of the supplied spherical coordinates.
 */
function VectorFromSphere(sphere, time) {
    time = MakeTime(time);
    const radlat = sphere.lat * DEG2RAD;
    const radlon = sphere.lon * DEG2RAD;
    const rcoslat = sphere.dist * Math.cos(radlat);
    return new Vector(rcoslat * Math.cos(radlon), rcoslat * Math.sin(radlon), sphere.dist * Math.sin(radlat), time);
}
/**
 * @brief The different kinds of lunar/solar eclipses..
 *
 * `Penumbral`: A lunar eclipse in which only the Earth's penumbra falls on the Moon. (Never used for a solar eclipse.)
 * `Partial`: A partial lunar/solar eclipse.
 * `Annular`: A solar eclipse in which the entire Moon is visible against the Sun, but the Sun appears as a ring around the Moon. (Never used for a lunar eclipse.)
 * `Total`: A total lunar/solar eclipse.
 *
 * @enum {string}
 */
var EclipseKind;
(function (EclipseKind) {
    EclipseKind["Penumbral"] = "penumbral";
    EclipseKind["Partial"] = "partial";
    EclipseKind["Annular"] = "annular";
    EclipseKind["Total"] = "total";
})(EclipseKind || (EclipseKind = {}));
/**
 * @brief Indicates whether a crossing through the ecliptic plane is ascending or descending.
 *
 * `Invalid` is a placeholder for an unknown or missing node.
 * `Ascending` indicates a body passing through the ecliptic plane from south to north.
 * `Descending` indicates a body passing through the ecliptic plane from north to south.
 *
 * @enum {number}
 */
var NodeEventKind;
(function (NodeEventKind) {
    NodeEventKind[NodeEventKind["Invalid"] = 0] = "Invalid";
    NodeEventKind[NodeEventKind["Ascending"] = 1] = "Ascending";
    NodeEventKind[NodeEventKind["Descending"] = -1] = "Descending";
})(NodeEventKind || (NodeEventKind = {}));

function formatDate(date) {
  const year = date.getUTCFullYear();
  const month = String(date.getUTCMonth() + 1).padStart(2, "0");
  const day = String(date.getUTCDate()).padStart(2, "0");
  return `${year}-${month}-${day}`;
}
async function getFullMoonDates(startYear, endYear) {
  const dates = [];
  console.log(`Calculating full moons from ${startYear} to ${endYear}`);
  let searchTime = MakeTime(startYear);
  let moonQuarter = SearchMoonQuarter(searchTime);
  while (moonQuarter) {
    const date = new Date(moonQuarter.time.toString());
    const year = date.getUTCFullYear();
    if (year > endYear) {
      break;
    }
    if (moonQuarter.quarter === 2) {
      const formattedDate = formatDate(date);
      console.log(`Found full moon on: ${formattedDate}`);
      dates.push(formattedDate);
    }
    moonQuarter = NextMoonQuarter(moonQuarter);
  }
  return dates;
}
async function getSolarEvents(startYear, endYear) {
  const dates = [];
  console.log(`Calculating solar events from ${startYear} to ${endYear}`);
  for (let year = startYear; year <= endYear; year++) {
    try {
      const seasons = Seasons(year);
      const march = new Date(seasons.mar_equinox.toString());
      console.log(`Spring equinox found: ${march}`);
      dates.push(formatDate(march));
      const june = new Date(seasons.jun_solstice.toString());
      console.log(`Summer solstice found: ${june}`);
      dates.push(formatDate(june));
      const sept = new Date(seasons.sep_equinox.toString());
      console.log(`Fall equinox found: ${sept}`);
      dates.push(formatDate(sept));
      const dec = new Date(seasons.dec_solstice.toString());
      console.log(`Winter solstice found: ${dec}`);
      dates.push(formatDate(dec));
    } catch (error) {
      console.error(`Error calculating solar events for ${year}:`, error);
    }
  }
  return dates;
}

const Calendar = ({
  year = (/* @__PURE__ */ new Date()).getFullYear(),
  forPrint = false,
  printColumns = 3,
  totalMonths = 15,
  size = "letter",
  orientation = "portrait",
  rows = 4,
  columns = 3,
  header = true,
  testing = false
}) => {
  const [windowWidth, setWindowWidth] = reactExports.useState(0);
  const [visibleMonths, setVisibleMonths] = reactExports.useState(14);
  const [columnCount, setColumnCount] = reactExports.useState(1);
  const showYearHeader = header;
  const baseYear = year;
  const nextYear = baseYear + 1;
  const [fullMoonDates, setFullMoonDates] = reactExports.useState([]);
  const [solarEvents, setSolarEvents] = reactExports.useState({});
  reactExports.useEffect(() => {
    console.log("Calendar: Starting astronomical calculations for year:", baseYear);
    async function fetchAstronomicalData() {
      try {
        const moons = await getFullMoonDates(baseYear, nextYear);
        console.log("Calendar: Received full moon dates:", moons);
        setFullMoonDates(moons);
        const events = await getSolarEvents(baseYear, nextYear);
        console.log("Calendar: Received solar events:", events);
        const eventMap = {};
        events.forEach((date) => {
          const month = parseInt(date.split("-")[1]);
          const type = month === 3 || month === 9 ? "equinox" : "solstice";
          console.log(`Calendar: Adding ${type} event for ${date}`);
          eventMap[date] = type;
        });
        console.log("Calendar: Final solar events map:", eventMap);
        setSolarEvents(eventMap);
      } catch (error) {
        console.error("Error fetching astronomical data:", error);
      }
    }
    fetchAstronomicalData();
  }, [baseYear, nextYear]);
  reactExports.useEffect(() => {
    setWindowWidth(window.innerWidth);
    const handleResize = () => {
      if (forPrint) {
        const defaultMonths = printColumns === 4 ? 16 : 15;
        const months3 = totalMonths ? Math.max(12, totalMonths) : defaultMonths;
        setColumnCount(printColumns);
        setVisibleMonths(months3);
        return;
      }
      const width = window.innerWidth;
      let columns2 = 1;
      let months2 = 14;
      if (width >= 1200) {
        columns2 = 4;
        months2 = 16;
      } else if (width >= 900) {
        columns2 = 3;
        months2 = 15;
      } else if (width >= 600) {
        columns2 = 2;
        months2 = 14;
      }
      setWindowWidth(width);
      setColumnCount(columns2);
      setVisibleMonths(months2);
    };
    handleResize();
    if (!forPrint) {
      window.addEventListener("resize", handleResize);
      return () => window.removeEventListener("resize", handleResize);
    }
  }, [forPrint, printColumns, totalMonths]);
  const months = Array.from({ length: 18 }, (_, i) => {
    const monthIndex = i % 12;
    const yearOffset = Math.floor(i / 12);
    const year2 = baseYear + yearOffset;
    console.log(`Generating month ${monthIndex + 1} for year ${year2}`);
    return {
      month: monthIndex,
      year: year2
    };
  });
  const weekDays = ["S", "M", "T", "W", "T", "F", "S"];
  const getMonthData = (month, year2) => {
    console.log(`Getting data for month ${month + 1}, year ${year2}`);
    const firstDay = new Date(year2, month, 1);
    const lastDay = new Date(year2, month + 1, 0);
    const previousMonthLastDay = new Date(year2, month, 0);
    const daysInMonth = lastDay.getDate();
    const startingDay = firstDay.getDay();
    const previousMonthDays = previousMonthLastDay.getDate();
    const monthData = [];
    let currentWeek = [];
    for (let i = 0; i < startingDay; i++) {
      currentWeek.push({
        date: previousMonthDays - startingDay + i + 1,
        currentMonth: false,
        fullMoon: false
      });
    }
    for (let day = 1; day <= daysInMonth; day++) {
      const dateString = `${year2}-${String(month + 1).padStart(2, "0")}-${String(day).padStart(2, "0")}`;
      const isFullMoon = fullMoonDates.includes(dateString);
      const specialDay = solarEvents[dateString];
      if (isFullMoon) {
        console.log(`Calendar: Found full moon on ${dateString}`);
      }
      if (specialDay) {
        console.log(`Calendar: Found ${specialDay} on ${dateString}`);
      }
      currentWeek.push({
        date: day,
        currentMonth: true,
        fullMoon: isFullMoon,
        isSpecialDay: specialDay
      });
      if (currentWeek.length === 7) {
        monthData.push(currentWeek);
        currentWeek = [];
      }
    }
    let nextMonthDay = 1;
    while (currentWeek.length < 7) {
      currentWeek.push({
        date: nextMonthDay++,
        currentMonth: false,
        fullMoon: false
      });
    }
    if (currentWeek.length > 0) {
      monthData.push(currentWeek);
    }
    return monthData;
  };
  const calendarStyle = {
    "--print-columns": forPrint ? printColumns : columnCount
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `calendar ${forPrint ? "print" : ""}`, style: calendarStyle, children: [
    showYearHeader && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "calendar-header", children: /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { children: baseYear }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "calendar-grid", children: months.slice(0, visibleMonths).map(({ month, year: year2 }) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "month", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "month-header", children: /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { children: new Date(year2, month).toLocaleString("default", { month: "long" }) }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "week-days", children: weekDays.map((day, index) => /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "week-day", children: day }, index)) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "month-grid", children: getMonthData(month, year2).flat().map((day, dayIndex) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "div",
        {
          className: `calendar-day${!day.currentMonth ? " other-month" : ""}`,
          children: [
            !day.fullMoon && !day.isSpecialDay && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "date", children: day.date }),
            day.fullMoon && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "day-marker-moon-full" }),
            day.isSpecialDay && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `day-marker-${day.isSpecialDay}` })
          ]
        },
        dayIndex
      )) })
    ] }, `${year2}-${month}`)) })
  ] });
};

const $$Astro = createAstro();
const $$ = createComponent(($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$;
  const { path } = Astro2.params;
  const segments = path?.split("/") || [];
  const url = new URL(Astro2.request.url);
  const searchParams = Object.fromEntries(url.searchParams);
  if (path === "favicon.ico") {
    return new Response(null, { status: 204 });
  }
  if (!segments.length || segments[0] === "") {
    return Astro2.redirect(`/${(/* @__PURE__ */ new Date()).getFullYear()}`);
  }
  let [year, size, orientation, lastSegment] = segments;
  const yearNum = parseInt(year);
  if (isNaN(yearNum)) {
    throw new Error(`Invalid year: ${year}`);
  }
  const showHeader = searchParams.header !== "false";
  const isTesting = searchParams.test === "true";
  return renderTemplate`<html lang="en"> <head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><title>Calendar ${year}</title>${renderHead()}</head> <body> <div style="padding: 20px;"> <h1>Calendar ${year}</h1> <div id="error-display" style="display: none; color: red; padding: 1em; margin: 1em; border: 1px solid red;"></div> <div id="root"> ${renderComponent($$result, "Calendar", Calendar, { "client:visible": true, "year": yearNum, "header": showHeader, "testing": isTesting, "client:component-hydration": "visible", "client:component-path": "/Users/todd/Github/CascadeProjects/calendar-thing/src/components/Calendar", "client:component-export": "Calendar" })} </div> </div> ${renderScript($$result, "/Users/todd/Github/CascadeProjects/calendar-thing/src/pages/[...path].astro?astro&type=script&index=0&lang.ts")} </body> </html>`;
}, "/Users/todd/Github/CascadeProjects/calendar-thing/src/pages/[...path].astro", undefined);

const $$file = "/Users/todd/Github/CascadeProjects/calendar-thing/src/pages/[...path].astro";
const $$url = "/[...path]";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
