---
import { Calendar } from '../components/Calendar';
import { CalendarImage } from '../components/CalendarImage';
import '../index.css';

// Get path segments and search params
const { path } = Astro.params;
const segments = path?.split('/') || [];
const url = new URL(Astro.request.url);
const searchParams = Object.fromEntries(url.searchParams);

// Handle favicon.ico request
if (path === 'favicon.ico') {
  return new Response(null, { status: 204 });
}

// Handle root redirect
if (!segments.length || segments[0] === '') {
  return Astro.redirect(`/${new Date().getFullYear()}`);
}

// Parse URL segments for RESTful structure
let [year, size, orientation, lastSegment] = segments;
const yearNum = parseInt(year);

if (isNaN(yearNum)) {
  throw new Error(`Invalid year: ${year}`);
}

// Set default values
const showHeader = searchParams.header !== 'false';
const isTesting = searchParams.test === 'true';

// Parse image format and DPI if present
let format: 'png' | 'jpg' | null = null;
let dpi = 300;

if (lastSegment) {
  const [dpiPart, formatPart] = lastSegment.split('.');
  if (formatPart === 'png' || formatPart === 'jpg') {
    format = formatPart;
    dpi = parseInt(dpiPart.replace('dpi', '')) || 300;
  }
}

// Determine if we're in preview/export mode
const isPreviewMode = Boolean(size && orientation);

// Build wrapper classes for proper CSS hierarchy
const wrapperClasses = [
  size ? `size-${size.toLowerCase()}` : '',
  orientation ? `orientation-${orientation.toLowerCase()}` : ''
].filter(Boolean).join(' ');
---

<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calendar {year}</title>
  </head>
  <body>
    <div id="error-display" style="display: none; color: red; padding: 1em; margin: 1em; border: 1px solid red;"></div>
    <div id="root" class={wrapperClasses}>
      {!format ? (
        <Calendar 
          client:visible
          year={yearNum}
          header={showHeader}
          testing={isTesting}
          size={size}
          orientation={orientation}
          forPrint={isPreviewMode}
        />
      ) : (
        <CalendarImage
          client:visible
          year={yearNum}
          header={showHeader}
          testing={false}
          size={size}
          orientation={orientation}
          format={format}
          dpi={dpi}
        />
      )}
    </div>

    <script>
      console.log('Calendar props:', {
        year: yearNum,
        header: showHeader,
        testing: isTesting,
        size,
        orientation,
        format,
        dpi,
        isPreviewMode
      });
      
      window.addEventListener('error', (e) => {
        console.error('Client error:', e);
        const display = document.getElementById('error-display');
        if (display) {
          display.style.display = 'block';
          display.textContent = e.message;
        }
      });
    </script>
  </body>
</html>
